/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGRUBY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus)
#pragma GCC diagnostic ignored "-Wregister"
#if __GNUC__ >= 10
#pragma GCC diagnostic ignored "-Wvolatile"
#if __GNUC__ >= 11
#pragma GCC diagnostic ignored "-Wdeprecated-enum-enum-conversion"
#endif
#endif
#endif
#endif

#include <ruby.h>

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif
#ifndef RTYPEDDATA_P
# define RTYPEDDATA_P(x) (TYPE(x) != T_DATA)
#endif



/*
 * The following macros are used for providing the correct type of a
 * function pointer to the Ruby C API.
 * Starting with Ruby 2.7 (corresponding to RB_METHOD_DEFINITION_DECL being
 * defined) these macros act transparently due to Ruby's moving away from
 * ANYARGS and instead employing strict function signatures.
 *
 * Note: In case of C (not C++) the macros are transparent even before
 * Ruby 2.7 due to the fact that the Ruby C API used function declarators
 * with empty parentheses, which allows for an unspecified number of
 * arguments.
 *
 * PROTECTFUNC(f) is used for the function pointer argument of the Ruby
 * C API function rb_protect().
 *
 * VALUEFUNC(f) is used for the function pointer argument(s) of Ruby C API
 * functions like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is used to typecast a C function that implements either
 * the "mark" or "free" stuff for a Ruby Data object, so that it can be
 * passed as an argument to Ruby C API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 *
 * SWIG_RUBY_VOID_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like rb_define_virtual_variable().
 *
 * SWIG_RUBY_INT_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like st_foreach().
 */
#if defined(__cplusplus) && !defined(RB_METHOD_DEFINITION_DECL)
#  define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#  define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#  define VOIDFUNC(f) ((RUBY_DATA_FUNC) f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) ((void (*)(ANYARGS))(f))
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) ((int (*)(ANYARGS))(f))
#else
#  define PROTECTFUNC(f) (f)
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) (f)
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects.
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ID id, VALUE *var) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT",
                             VALUEFUNC(swig_ruby_trackings_count),
                             SWIG_RUBY_VOID_ANYARGS_FUNC((rb_gvar_setter_t*)NULL));
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object. */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    // object might have the T_ZOMBIE type, but that's just
    // because the GC has flagged it as such for a deferred
    // destruction. Until then, it's still a T_DATA object.
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(st_data_t ptr, st_data_t obj, st_data_t meth) {
  ((void (*) (void *, VALUE))meth)((void *)ptr, (VALUE)obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings,
             SWIG_RUBY_INT_ANYARGS_FUNC(swig_ruby_internal_iterate_callback),
             (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;

  if (!ptr)
    return Qnil;

  assert(type);
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);

      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));

  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  if (NIL_P(stype))
    return NULL;
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (TYPE(obj) == T_DATA && !RTYPEDDATA_P(obj)) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA || (TYPE(obj) == T_DATA && RTYPEDDATA_P(obj))) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE)) {
    if (!RDATA(obj)->dfree)
      return SWIG_ERROR_RELEASE_NOT_OWNED;
  }

  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }

    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  if (flags & SWIG_POINTER_CLEAR) {
    DATA_PTR(obj) = 0;
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  rb_undef_alloc_func(cl);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall2( proc, swig_arity_id, 0, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t swig_types[0]
#define SWIGTYPE_p_TagLib__ByteVector swig_types[1]
#define SWIGTYPE_p_TagLib__ByteVectorList swig_types[2]
#define SWIGTYPE_p_TagLib__File swig_types[3]
#define SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame swig_types[4]
#define SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrameV22 swig_types[5]
#define SWIGTYPE_p_TagLib__ID3v2__ChapterFrame swig_types[6]
#define SWIGTYPE_p_TagLib__ID3v2__CommentsFrame swig_types[7]
#define SWIGTYPE_p_TagLib__ID3v2__ExtendedHeader swig_types[8]
#define SWIGTYPE_p_TagLib__ID3v2__Frame swig_types[9]
#define SWIGTYPE_p_TagLib__ID3v2__FrameFactory swig_types[10]
#define SWIGTYPE_p_TagLib__ID3v2__Frame__Header swig_types[11]
#define SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame swig_types[12]
#define SWIGTYPE_p_TagLib__ID3v2__Header swig_types[13]
#define SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame swig_types[14]
#define SWIGTYPE_p_TagLib__ID3v2__PrivateFrame swig_types[15]
#define SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame swig_types[16]
#define SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume swig_types[17]
#define SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame swig_types[18]
#define SWIGTYPE_p_TagLib__ID3v2__Tag swig_types[19]
#define SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame swig_types[20]
#define SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame swig_types[21]
#define SWIGTYPE_p_TagLib__ID3v2__UnknownFrame swig_types[22]
#define SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame swig_types[23]
#define SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame swig_types[24]
#define SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame swig_types[25]
#define SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame swig_types[26]
#define SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t swig_types[27]
#define SWIGTYPE_p_TagLib__String swig_types[28]
#define SWIGTYPE_p_TagLib__Tag swig_types[29]
#define SWIGTYPE_p_char swig_types[30]
#define SWIGTYPE_p_offset_t swig_types[31]
#define SWIGTYPE_p_unsigned_char swig_types[32]
#define SWIGTYPE_p_unsigned_int swig_types[33]
#define SWIGTYPE_p_unsigned_long swig_types[34]
#define SWIGTYPE_p_wchar_t swig_types[35]
static swig_type_info *swig_types[37];
static swig_module_info swig_module = {swig_types, 36, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_taglib_id3v2
#define SWIG_name    "TagLib::ID3v2"

static VALUE mID3v2;

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <taglib/id3v2frame.h>
#include <taglib/id3v2framefactory.h>
#include <taglib/id3v2tag.h>
#include <taglib/id3v2header.h>

#include <taglib/tbytevectorlist.h>

#include <taglib/attachedpictureframe.h>
#include <taglib/chapterframe.h>
#include <taglib/commentsframe.h>
#include <taglib/generalencapsulatedobjectframe.h>
#include <taglib/popularimeterframe.h>
#include <taglib/privateframe.h>
#include <taglib/relativevolumeframe.h>
#include <taglib/tableofcontentsframe.h>
#include <taglib/textidentificationframe.h>
#include <taglib/uniquefileidentifierframe.h>
#include <taglib/unknownframe.h>
#include <taglib/unsynchronizedlyricsframe.h>
#include <taglib/urllinkframe.h>
using namespace TagLib;


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN VALUE
SWIG_ruby_failed(VALUE SWIGUNUSEDPARM(arg1), VALUE SWIGUNUSEDPARM(arg2))
{
  return Qnil;
} 


/*@SWIG:/opt/local/share/swig/4.1.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2LONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <taglib/tstring.h>
#include <taglib/tstringlist.h>
#include <taglib/tbytevector.h>
#include <taglib/tbytevectorlist.h>
#include <taglib/tfile.h>

#if defined(HAVE_RUBY_ENCODING_H) && HAVE_RUBY_ENCODING_H
# include <ruby/encoding.h>
# define ASSOCIATE_UTF8_ENCODING(value) rb_enc_associate(value, rb_utf8_encoding());
# define ASSOCIATE_FILESYSTEM_ENCODING(value) rb_enc_associate(value, rb_filesystem_encoding());
# define CONVERT_TO_UTF8(value) rb_str_export_to_enc(value, rb_utf8_encoding())
#else
# define ASSOCIATE_UTF8_ENCODING(value) /* nothing */
# define ASSOCIATE_FILESYSTEM_ENCODING(value)
# define CONVERT_TO_UTF8(value) value
#endif

VALUE taglib_bytevector_to_ruby_string(const TagLib::ByteVector &byteVector) {
  return rb_str_new(byteVector.data(), byteVector.size());
}

TagLib::ByteVector ruby_string_to_taglib_bytevector(VALUE s) {
  if (NIL_P(s)) {
    return TagLib::ByteVector();
  } else {
    return TagLib::ByteVector(RSTRING_PTR(StringValue(s)), RSTRING_LEN(s));
  }
}

VALUE taglib_string_to_ruby_string(const TagLib::String & string) {
  VALUE result = rb_str_new2(string.toCString(true));
  ASSOCIATE_UTF8_ENCODING(result);
  return result;
}

TagLib::String ruby_string_to_taglib_string(VALUE s) {
  if (NIL_P(s)) {
    return TagLib::String();
  } else {
    return TagLib::String(RSTRING_PTR(CONVERT_TO_UTF8(StringValue(s))), TagLib::String::UTF8);
  }
}

VALUE taglib_string_list_to_ruby_array(const TagLib::StringList & list) {
  VALUE ary = rb_ary_new2(list.size());
  for (TagLib::StringList::ConstIterator it = list.begin(); it != list.end(); it++) {
    VALUE s = taglib_string_to_ruby_string(*it);
    rb_ary_push(ary, s);
  }
  return ary;
}

TagLib::StringList ruby_array_to_taglib_string_list(VALUE ary) {
  TagLib::StringList result = TagLib::StringList();
  if (NIL_P(ary)) {
    return result;
  }
  for (long i = 0; i < RARRAY_LEN(ary); i++) {
    VALUE e = rb_ary_entry(ary, i);
    TagLib::String s = ruby_string_to_taglib_string(e);
    result.append(s);
  }
  return result;
}

VALUE taglib_bytevectorlist_to_ruby_array(const TagLib::ByteVectorList & list) {
  VALUE ary = rb_ary_new2(list.size());
  for (TagLib::ByteVectorList::ConstIterator it = list.begin(); it != list.end(); it++) {
    VALUE s = taglib_bytevector_to_ruby_string(*it);
    rb_ary_push(ary, s);
  }
  return ary;
}

TagLib::ByteVectorList ruby_array_to_taglib_bytevectorlist(VALUE ary) {
  TagLib::ByteVectorList result = TagLib::ByteVectorList();
  if (NIL_P(ary)) {
    return result;
  }
  for (long i = 0; i < RARRAY_LEN(ary); i++) {
    VALUE e = rb_ary_entry(ary, i);
    TagLib::ByteVector s = ruby_string_to_taglib_bytevector(e);
    result.append(s);
  }
  return result;
}

VALUE taglib_filename_to_ruby_string(TagLib::FileName filename) {
  VALUE result;
#ifdef _WIN32
  const char *s = (const char *) filename;
  result = rb_str_new2(s);
#else
  result = rb_str_new2(filename);
#endif
  ASSOCIATE_FILESYSTEM_ENCODING(result);
  return result;
}

TagLib::FileName ruby_string_to_taglib_filename(VALUE s) {
#ifdef _WIN32
  #if defined(HAVE_RUBY_ENCODING_H) && HAVE_RUBY_ENCODING_H
    VALUE ospath;
    const char *utf8;
    int len;
    wchar_t *wide;

    ospath = rb_str_encode_ospath(s);
    utf8 = StringValuePtr(ospath);
    len = MultiByteToWideChar(CP_UTF8, 0, utf8, -1, NULL, 0);
    if (!(wide = (wchar_t *) xmalloc(sizeof(wchar_t) * len))) {
      return TagLib::FileName((const char *) NULL);
    }
    MultiByteToWideChar(CP_UTF8, 0, utf8, -1, wide, len);
    TagLib::FileName filename(wide);
    xfree(wide);
    return filename;
  #else
    const char *filename = StringValuePtr(s);
    return TagLib::FileName(filename);
  #endif
#else
  return StringValuePtr(s);
#endif
}



VALUE taglib_id3v2_frame_to_ruby_object(const TagLib::ID3v2::Frame *frame) {
  TagLib::ByteVector id = frame->frameID();
  void *f = SWIG_as_voidptr(frame);
  swig_type_info *ti;
  if (dynamic_cast<const TagLib::ID3v2::UnknownFrame *>(frame))
    ti = SWIGTYPE_p_TagLib__ID3v2__UnknownFrame;
  else if (id == "APIC")
    ti = SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame;
  else if (id == "CHAP")
    ti = SWIGTYPE_p_TagLib__ID3v2__ChapterFrame;
  else if (id == "COMM")
    ti = SWIGTYPE_p_TagLib__ID3v2__CommentsFrame;
  else if (id == "CTOC")
    ti = SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame;
  else if (id == "GEOB")
    ti = SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame;
  else if (id == "POPM")
    ti = SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame;
  else if (id == "PRIV")
    ti = SWIGTYPE_p_TagLib__ID3v2__PrivateFrame;
  else if (id == "RVAD" || id == "RVA2")
    ti = SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame;
  else if (id == "TXXX")
    ti = SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame;
  else if (id.startsWith("T"))
    ti = SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame;
  else if (id == "UFID")
    ti = SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame;
  else if (id == "USLT")
    ti = SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame;
  else if (id == "WXXX")
    ti = SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame;
  else if (id.startsWith("W"))
    ti = SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame;
  else
    ti = SWIGTYPE_p_TagLib__ID3v2__Frame;
  return SWIG_NewPointerObj(f, ti, 0);
}

VALUE taglib_id3v2_framelist_to_ruby_array(TagLib::ID3v2::FrameList *list) {
  VALUE ary = rb_ary_new2(list->size());
  for (TagLib::ID3v2::FrameList::ConstIterator it = list->begin(); it != list->end(); it++) {
    VALUE s = taglib_id3v2_frame_to_ruby_object(*it);
    rb_ary_push(ary, s);
  }
  return ary;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[size], cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


/*@SWIG:/opt/local/share/swig/4.1.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


SWIGINTERNINLINE VALUE
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_short (VALUE obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


/*@SWIG:/opt/local/share/swig/4.1.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2DBL), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (VALUE obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}

SWIGINTERN VALUE
_wrap_picture_type_to_string(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","TagLib::Utils::pictureTypeToString", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = TagLib::Utils::pictureTypeToString(arg1);
  vresult = SWIG_NewPointerObj((new TagLib::String(result)), SWIGTYPE_p_TagLib__String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_picture_type_from_string(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::String const &","TagLib::Utils::pictureTypeFromString", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","TagLib::Utils::pictureTypeFromString", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::String * >(argp1);
  result = (int)TagLib::Utils::pictureTypeFromString((TagLib::String const &)*arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassHeader;

SWIGINTERN VALUE
_wrap_new_Header__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::Header *)new TagLib::ID3v2::Header();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Header_allocate(VALUE self)
#else
_wrap_Header_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__Header);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Header__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::Header *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::Header *)new TagLib::ID3v2::Header((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Header(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Header__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Header__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Header.new", 
    "    Header.new()\n"
    "    Header.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_Header(void *self) {
    TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Header_major_version(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","majorVersion", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::Header const *)arg1)->majorVersion();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_major_versione___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header *","setMajorVersion", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setMajorVersion", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setMajorVersion(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_revision_number(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","revisionNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::Header const *)arg1)->revisionNumber();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_unsynchronisation(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","unsynchronisation", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = (bool)((TagLib::ID3v2::Header const *)arg1)->unsynchronisation();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_extended_header(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","extendedHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = (bool)((TagLib::ID3v2::Header const *)arg1)->extendedHeader();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_experimental_indicator(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","experimentalIndicator", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = (bool)((TagLib::ID3v2::Header const *)arg1)->experimentalIndicator();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_footer_present(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","footerPresent", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = (bool)((TagLib::ID3v2::Header const *)arg1)->footerPresent();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_tag_size(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","tagSize", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::Header const *)arg1)->tagSize();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_complete_tag_size(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","completeTagSize", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::Header const *)arg1)->completeTagSize();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_tag_sizee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header *","setTagSize", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setTagSize", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setTagSize(arg2);
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: TagLib::ID3v2::Header.size

  call-seq:
    size -> unsigned int

Size or Length of the Header.
*/
SWIGINTERN VALUE
_wrap_Header_size(int argc, VALUE *argv, VALUE self) {
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (unsigned int)TagLib::ID3v2::Header::size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_file_identifier(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = TagLib::ID3v2::Header::fileIdentifier();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_datae___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header *","setData", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Header_render(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  result = ((TagLib::ID3v2::Header const *)arg1)->render();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassFrame;

SWIGINTERN void
free_TagLib_ID3v2_Frame(void *self) {
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Frame_frame_id(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame const *","frameID", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = ((TagLib::ID3v2::Frame const *)arg1)->frameID();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: TagLib::ID3v2::Frame.size

  call-seq:
    size -> unsigned int

Size or Length of the Frame.
*/
SWIGINTERN VALUE
_wrap_Frame_size(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::Frame const *)arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_datae___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","setData", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_texte___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setText((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = ((TagLib::ID3v2::Frame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_to_string_list(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::StringList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame const *","toStringList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = ((TagLib::ID3v2::Frame const *)arg1)->toStringList();
  {
    vresult = taglib_string_list_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_render(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame const *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = ((TagLib::ID3v2::Frame const *)arg1)->render();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_header(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::Frame::Header *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame const *","header", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = (TagLib::ID3v2::Frame::Header *)((TagLib::ID3v2::Frame const *)arg1)->header();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Frame__Header, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_text_delimiter(int argc, VALUE *argv, VALUE self) {
  TagLib::String::Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "TagLib::String::Type","TagLib::ID3v2::Frame::textDelimiter", 1, argv[0] ));
  } 
  arg1 = static_cast< TagLib::String::Type >(val1);
  result = TagLib::ID3v2::Frame::textDelimiter(arg1);
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_key_to_frame_id(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::String tmp1 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_string(argv[0]);
    arg1 = &tmp1;
  }
  result = TagLib::ID3v2::Frame::keyToFrameID((TagLib::String const &)*arg1);
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Frame_frame_idto_key(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = TagLib::ID3v2::Frame::frameIDToKey((TagLib::ByteVector const &)*arg1);
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassTag;

SWIGINTERN VALUE
_wrap_new_Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  offset_t arg2 ;
  TagLib::ID3v2::FrameFactory *arg3 = (TagLib::ID3v2::FrameFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","Tag", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_offset_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "offset_t","Tag", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "offset_t","Tag", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< offset_t * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","Tag", 3, argv[2] )); 
  }
  arg3 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp3);
  result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag(arg1,arg2,(TagLib::ID3v2::FrameFactory const *)arg3);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Tag_allocate(VALUE self)
#else
_wrap_Tag_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__Tag);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Tag__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  offset_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","Tag", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_offset_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "offset_t","Tag", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "offset_t","Tag", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< offset_t * >(argp2));
    }
  }
  result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag(arg1,arg2);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Tag__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_offset_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Tag__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_offset_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Tag__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Tag.new", 
    "    Tag.new()\n"
    "    Tag.new(TagLib::File *file, offset_t tagOffset, TagLib::ID3v2::FrameFactory const *factory)\n"
    "    Tag.new(TagLib::File *file, offset_t tagOffset)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_Tag(void *self) {
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Tag_title(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","title", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = ((TagLib::ID3v2::Tag const *)arg1)->title();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_artist(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","artist", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = ((TagLib::ID3v2::Tag const *)arg1)->artist();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_album(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","album", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = ((TagLib::ID3v2::Tag const *)arg1)->album();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_comment(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","comment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = ((TagLib::ID3v2::Tag const *)arg1)->comment();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_genre(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","genre", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = ((TagLib::ID3v2::Tag const *)arg1)->genre();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_year(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","year", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::Tag const *)arg1)->year();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_track(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","track", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::Tag const *)arg1)->track();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_titlee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","setTitle", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setTitle((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_artiste___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","setArtist", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setArtist((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_albume___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","setAlbum", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setAlbum((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_commente___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","setComment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setComment((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_genree___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","setGenre", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setGenre((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_yeare___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","setYear", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setYear", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setYear(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_tracke___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","setTrack", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setTrack", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setTrack(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_emptyq___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (bool)((TagLib::ID3v2::Tag const *)arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_header(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::Header *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","header", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (TagLib::ID3v2::Header *)((TagLib::ID3v2::Tag const *)arg1)->header();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_extended_header(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::ExtendedHeader *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","extendedHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (TagLib::ID3v2::ExtendedHeader *)((TagLib::ID3v2::Tag const *)arg1)->extendedHeader();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__ExtendedHeader, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_frame_list_map(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::FrameListMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","frameListMap", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (TagLib::ID3v2::FrameListMap *) &((TagLib::ID3v2::Tag const *)arg1)->frameListMap();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_frame_list__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","frameList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (TagLib::ID3v2::FrameList *) &((TagLib::ID3v2::Tag const *)arg1)->frameList();
  {
    vresult = taglib_id3v2_framelist_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_frame_list__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","frameList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::FrameList *) &((TagLib::ID3v2::Tag const *)arg1)->frameList((TagLib::ByteVector const &)*arg2);
  {
    vresult = taglib_id3v2_framelist_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Tag_frame_list(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Tag_frame_list__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tag_frame_list__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Tag.frame_list", 
    "    TagLib::ID3v2::FrameList const Tag.frame_list()\n"
    "    TagLib::ID3v2::FrameList const & Tag.frame_list(TagLib::ByteVector const &frameID)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_add_frame(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","addFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","addFrame", 2, argv[0] ));
  }
  SWIG_RubyUnlinkObjects(arg2);
  SWIG_RubyRemoveTracking(arg2);
  (arg1)->addFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_remove_frame(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","removeFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","removeFrame", 2, argv[0] ));
  }
  SWIG_RubyUnlinkObjects(arg2);
  SWIG_RubyRemoveTracking(arg2);
  (arg1)->removeFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Tag_remove_frames(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","removeFrames", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->removeFrames((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassFrameFactory;

SWIGINTERN VALUE
_wrap_FrameFactory_instance(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::FrameFactory *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::FrameFactory *)TagLib::ID3v2::FrameFactory::instance();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FrameFactory_create_frame(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ID3v2::Header *arg3 = (TagLib::ID3v2::Header *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  TagLib::ID3v2::Frame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","createFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","createFrame", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< TagLib::ID3v2::Header * >(argp3);
  result = (TagLib::ID3v2::Frame *)((TagLib::ID3v2::FrameFactory const *)arg1)->createFrame((TagLib::ByteVector const &)*arg2,(TagLib::ID3v2::Header const *)arg3);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FrameFactory_create_frame_for_property(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::StringList *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  TagLib::StringList tmp3 ;
  TagLib::ID3v2::Frame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","createFrameForProperty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  {
    tmp3 = ruby_array_to_taglib_string_list(argv[1]);
    arg3 = &tmp3;
  }
  result = (TagLib::ID3v2::Frame *)((TagLib::ID3v2::FrameFactory const *)arg1)->createFrameForProperty((TagLib::String const &)*arg2,(TagLib::StringList const &)*arg3);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FrameFactory_default_text_encoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","defaultTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::FrameFactory const *)arg1)->defaultTextEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FrameFactory_default_text_encodinge___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","setDefaultTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setDefaultTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setDefaultTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FrameFactory_is_using_default_text_encoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","isUsingDefaultTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp1);
  result = (bool)((TagLib::ID3v2::FrameFactory const *)arg1)->isUsingDefaultTextEncoding();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassRelativeVolumeFrame;

SWIGINTERN VALUE
_wrap_new_RelativeVolumeFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::RelativeVolumeFrame *)new TagLib::ID3v2::RelativeVolumeFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RelativeVolumeFrame_allocate(VALUE self)
#else
_wrap_RelativeVolumeFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_RelativeVolumeFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::RelativeVolumeFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::RelativeVolumeFrame *)new TagLib::ID3v2::RelativeVolumeFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_RelativeVolumeFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_RelativeVolumeFrame__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RelativeVolumeFrame__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "RelativeVolumeFrame.new", 
    "    RelativeVolumeFrame.new()\n"
    "    RelativeVolumeFrame.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_RelativeVolumeFrame(void *self) {
    TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_channels(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< TagLib::List< enum TagLib::ID3v2::RelativeVolumeFrame::ChannelType > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","channels", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->channels();
  {
    VALUE ary = rb_ary_new2((&result)->size());
    for (TagLib::List<TagLib::ID3v2::RelativeVolumeFrame::ChannelType>::ConstIterator it = (&result)->begin();
      it != (&result)->end(); it++) {
      VALUE ct = INT2NUM(*it);
      rb_ary_push(ary, ct);
    }
    vresult = ary;
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_volume_adjustment_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  short result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","volumeAdjustmentIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::ChannelType","volumeAdjustmentIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::ID3v2::RelativeVolumeFrame::ChannelType >(val2);
  result = (short)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->volumeAdjustmentIndex(arg2);
  vresult = SWIG_From_short(static_cast< short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_volume_adjustment_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","volumeAdjustmentIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  result = (short)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->volumeAdjustmentIndex();
  vresult = SWIG_From_short(static_cast< short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_RelativeVolumeFrame_volume_adjustment_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RelativeVolumeFrame_volume_adjustment_index__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RelativeVolumeFrame_volume_adjustment_index__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "RelativeVolumeFrame.volume_adjustment_index", 
    "    short RelativeVolumeFrame.volume_adjustment_index(TagLib::ID3v2::RelativeVolumeFrame::ChannelType type)\n"
    "    short RelativeVolumeFrame.volume_adjustment_index()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_set_volume_adjustment_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  short arg2 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame *","setVolumeAdjustmentIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  ecode2 = SWIG_AsVal_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "short","setVolumeAdjustmentIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::ChannelType","setVolumeAdjustmentIndex", 3, argv[1] ));
  } 
  arg3 = static_cast< TagLib::ID3v2::RelativeVolumeFrame::ChannelType >(val3);
  (arg1)->setVolumeAdjustmentIndex(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_set_volume_adjustment_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame *","setVolumeAdjustmentIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  ecode2 = SWIG_AsVal_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "short","setVolumeAdjustmentIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->setVolumeAdjustmentIndex(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_RelativeVolumeFrame_set_volume_adjustment_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RelativeVolumeFrame_set_volume_adjustment_index__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RelativeVolumeFrame_set_volume_adjustment_index__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "RelativeVolumeFrame.set_volume_adjustment_index", 
    "    void RelativeVolumeFrame.set_volume_adjustment_index(short index, TagLib::ID3v2::RelativeVolumeFrame::ChannelType type)\n"
    "    void RelativeVolumeFrame.set_volume_adjustment_index(short index)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_volume_adjustment__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","volumeAdjustment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::ChannelType","volumeAdjustment", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::ID3v2::RelativeVolumeFrame::ChannelType >(val2);
  result = (float)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->volumeAdjustment(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_volume_adjustment__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","volumeAdjustment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  result = (float)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->volumeAdjustment();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_RelativeVolumeFrame_volume_adjustment(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RelativeVolumeFrame_volume_adjustment__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RelativeVolumeFrame_volume_adjustment__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "RelativeVolumeFrame.volume_adjustment", 
    "    float RelativeVolumeFrame.volume_adjustment(TagLib::ID3v2::RelativeVolumeFrame::ChannelType type)\n"
    "    float RelativeVolumeFrame.volume_adjustment()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_set_volume_adjustment__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  float arg2 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame *","setVolumeAdjustment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","setVolumeAdjustment", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::ChannelType","setVolumeAdjustment", 3, argv[1] ));
  } 
  arg3 = static_cast< TagLib::ID3v2::RelativeVolumeFrame::ChannelType >(val3);
  (arg1)->setVolumeAdjustment(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_set_volume_adjustment__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame *","setVolumeAdjustment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","setVolumeAdjustment", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->setVolumeAdjustment(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_RelativeVolumeFrame_set_volume_adjustment(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RelativeVolumeFrame_set_volume_adjustment__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RelativeVolumeFrame_set_volume_adjustment__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "RelativeVolumeFrame.set_volume_adjustment", 
    "    void RelativeVolumeFrame.set_volume_adjustment(float adjustment, TagLib::ID3v2::RelativeVolumeFrame::ChannelType type)\n"
    "    void RelativeVolumeFrame.set_volume_adjustment(float adjustment)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_peak_volume__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","peakVolume", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::ChannelType","peakVolume", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::ID3v2::RelativeVolumeFrame::ChannelType >(val2);
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->peakVolume(arg2);
  vresult = SWIG_NewPointerObj((new TagLib::ID3v2::RelativeVolumeFrame::PeakVolume(result)), SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_peak_volume__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","peakVolume", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->peakVolume();
  vresult = SWIG_NewPointerObj((new TagLib::ID3v2::RelativeVolumeFrame::PeakVolume(result)), SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_RelativeVolumeFrame_peak_volume(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RelativeVolumeFrame_peak_volume__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RelativeVolumeFrame_peak_volume__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "RelativeVolumeFrame.peak_volume", 
    "    TagLib::ID3v2::RelativeVolumeFrame::PeakVolume RelativeVolumeFrame.peak_volume(TagLib::ID3v2::RelativeVolumeFrame::ChannelType type)\n"
    "    TagLib::ID3v2::RelativeVolumeFrame::PeakVolume RelativeVolumeFrame.peak_volume()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_set_peak_volume__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *arg2 = 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame *","setPeakVolume", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume const &","setPeakVolume", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume const &","setPeakVolume", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame::PeakVolume * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::ChannelType","setPeakVolume", 3, argv[1] ));
  } 
  arg3 = static_cast< TagLib::ID3v2::RelativeVolumeFrame::ChannelType >(val3);
  (arg1)->setPeakVolume((TagLib::ID3v2::RelativeVolumeFrame::PeakVolume const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_set_peak_volume__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame *","setPeakVolume", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume const &","setPeakVolume", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume const &","setPeakVolume", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame::PeakVolume * >(argp2);
  (arg1)->setPeakVolume((TagLib::ID3v2::RelativeVolumeFrame::PeakVolume const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_RelativeVolumeFrame_set_peak_volume(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RelativeVolumeFrame_set_peak_volume__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RelativeVolumeFrame_set_peak_volume__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "RelativeVolumeFrame.set_peak_volume", 
    "    void RelativeVolumeFrame.set_peak_volume(TagLib::ID3v2::RelativeVolumeFrame::PeakVolume const &peak, TagLib::ID3v2::RelativeVolumeFrame::ChannelType type)\n"
    "    void RelativeVolumeFrame.set_peak_volume(TagLib::ID3v2::RelativeVolumeFrame::PeakVolume const &peak)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_identification(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame const *","identification", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->identification();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RelativeVolumeFrame_identificatione___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame *","setIdentification", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setIdentification((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassPeakVolume;

SWIGINTERN VALUE
_wrap_PeakVolume_bits_representing_peak_set(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *arg1 = (TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *","bitsRepresentingPeak", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame::PeakVolume * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned char","bitsRepresentingPeak", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned char >(val2);
  if (arg1) (arg1)->bitsRepresentingPeak = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PeakVolume_bits_representing_peak_get(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *arg1 = (TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *","bitsRepresentingPeak", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame::PeakVolume * >(argp1);
  result = (unsigned char) ((arg1)->bitsRepresentingPeak);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PeakVolume_peak_volume_set(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *arg1 = (TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *) 0 ;
  TagLib::ByteVector *arg2 = (TagLib::ByteVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *","peakVolume", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame::PeakVolume * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  if (arg1) (arg1)->peakVolume = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PeakVolume_peak_volume_get(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *arg1 = (TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *","peakVolume", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::RelativeVolumeFrame::PeakVolume * >(argp1);
  result = (TagLib::ByteVector *)& ((arg1)->peakVolume);
  {
    vresult = taglib_bytevector_to_ruby_string(*(result));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PeakVolume_allocate(VALUE self)
#else
_wrap_PeakVolume_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PeakVolume(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *)new TagLib::ID3v2::RelativeVolumeFrame::PeakVolume();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_RelativeVolumeFrame_PeakVolume(void *self) {
    TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *arg1 = (TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

static swig_class SwigClassAttachedPictureFrame;

SWIGINTERN VALUE
_wrap_AttachedPictureFrame_type_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame::Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame::Type","TagLib::ID3v2::AttachedPictureFrame::typeToString", 1, argv[0] ));
  } 
  arg1 = static_cast< TagLib::ID3v2::AttachedPictureFrame::Type >(val1);
  result = TagLib::ID3v2::AttachedPictureFrame::typeToString(arg1);
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_type_from_string(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::String tmp1 ;
  TagLib::ID3v2::AttachedPictureFrame::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_string(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::AttachedPictureFrame::Type)TagLib::ID3v2::AttachedPictureFrame::typeFromString((TagLib::String const &)*arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_AttachedPictureFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::AttachedPictureFrame *)new TagLib::ID3v2::AttachedPictureFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AttachedPictureFrame_allocate(VALUE self)
#else
_wrap_AttachedPictureFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AttachedPictureFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::AttachedPictureFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::AttachedPictureFrame *)new TagLib::ID3v2::AttachedPictureFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_AttachedPictureFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_AttachedPictureFrame__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AttachedPictureFrame__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "AttachedPictureFrame.new", 
    "    AttachedPictureFrame.new()\n"
    "    AttachedPictureFrame.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_AttachedPictureFrame(void *self) {
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_AttachedPictureFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_to_string_list(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::StringList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","toStringList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->toStringList();
  {
    vresult = taglib_string_list_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_text_encoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","textEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->textEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_text_encodinge___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_mime_type(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","mimeType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->mimeType();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_mime_typee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setMimeType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setMimeType((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_type(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::AttachedPictureFrame::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = (TagLib::ID3v2::AttachedPictureFrame::Type)((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->type();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_typee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ID3v2::AttachedPictureFrame::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame::Type","setType", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::ID3v2::AttachedPictureFrame::Type >(val2);
  (arg1)->setType(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","description", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->description();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_descriptione___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setDescription", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_picture(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","picture", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->picture();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachedPictureFrame_picturee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setPicture", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setPicture((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassAttachedPictureFrameV22;

SWIGINTERN void
free_TagLib_ID3v2_AttachedPictureFrameV22(void *self) {
    TagLib::ID3v2::AttachedPictureFrameV22 *arg1 = (TagLib::ID3v2::AttachedPictureFrameV22 *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

static swig_class SwigClassChapterFrame;

SWIGINTERN VALUE
_wrap_new_ChapterFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  TagLib::ID3v2::ChapterFrame *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","ChapterFrame", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::ChapterFrame *)new TagLib::ID3v2::ChapterFrame((TagLib::ID3v2::Header const *)arg1,(TagLib::ByteVector const &)*arg2);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ChapterFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  TagLib::ID3v2::FrameList *arg6 = 0 ;
  TagLib::ByteVector tmp1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  TagLib::ID3v2::ChapterFrame *result = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","ChapterFrame", 2, argv[1] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","ChapterFrame", 3, argv[2] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","ChapterFrame", 4, argv[3] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","ChapterFrame", 5, argv[4] ));
  } 
  arg5 = static_cast< unsigned int >(val5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameList const &","ChapterFrame", 6, argv[5] )); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::ID3v2::FrameList const &","ChapterFrame", 6, argv[5])); 
  }
  arg6 = reinterpret_cast< TagLib::ID3v2::FrameList * >(argp6);
  result = (TagLib::ID3v2::ChapterFrame *)new TagLib::ID3v2::ChapterFrame((TagLib::ByteVector const &)*arg1,arg2,arg3,arg4,arg5,(TagLib::ID3v2::FrameList const &)*arg6);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ChapterFrame_allocate(VALUE self)
#else
_wrap_ChapterFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__ChapterFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ChapterFrame__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  TagLib::ByteVector tmp1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  TagLib::ID3v2::ChapterFrame *result = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","ChapterFrame", 2, argv[1] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","ChapterFrame", 3, argv[2] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","ChapterFrame", 4, argv[3] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","ChapterFrame", 5, argv[4] ));
  } 
  arg5 = static_cast< unsigned int >(val5);
  result = (TagLib::ID3v2::ChapterFrame *)new TagLib::ID3v2::ChapterFrame((TagLib::ByteVector const &)*arg1,arg2,arg3,arg4,arg5);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ChapterFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs;
  if (argc > 6) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__Header, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ChapterFrame__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ChapterFrame__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, SWIG_POINTER_NO_NULL);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_ChapterFrame__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "ChapterFrame.new", 
    "    ChapterFrame.new(TagLib::ID3v2::Header const *tagHeader, TagLib::ByteVector const &data)\n"
    "    ChapterFrame.new(TagLib::ByteVector const &elementID, unsigned int startTime, unsigned int endTime, unsigned int startOffset, unsigned int endOffset, TagLib::ID3v2::FrameList const &embeddedFrames)\n"
    "    ChapterFrame.new(TagLib::ByteVector const &elementID, unsigned int startTime, unsigned int endTime, unsigned int startOffset, unsigned int endOffset)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_ChapterFrame(void *self) {
    TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ChapterFrame_element_id(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","elementID", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  result = ((TagLib::ID3v2::ChapterFrame const *)arg1)->elementID();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_start_time(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","startTime", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::ChapterFrame const *)arg1)->startTime();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_end_time(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","endTime", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::ChapterFrame const *)arg1)->endTime();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_start_offset(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","startOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::ChapterFrame const *)arg1)->startOffset();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_end_offset(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","endOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::ChapterFrame const *)arg1)->endOffset();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_element_ide___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","setElementID", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setElementID((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_start_timee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","setStartTime", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setStartTime", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  (arg1)->setStartTime((unsigned int const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_end_timee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","setEndTime", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setEndTime", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  (arg1)->setEndTime((unsigned int const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_start_offsete___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","setStartOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setStartOffset", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  (arg1)->setStartOffset((unsigned int const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_end_offsete___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","setEndOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setEndOffset", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  (arg1)->setEndOffset((unsigned int const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_embedded_frame_list_map(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::FrameListMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","embeddedFrameListMap", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  result = (TagLib::ID3v2::FrameListMap *) &((TagLib::ID3v2::ChapterFrame const *)arg1)->embeddedFrameListMap();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_embedded_frame_list__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","embeddedFrameList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  result = (TagLib::ID3v2::FrameList *) &((TagLib::ID3v2::ChapterFrame const *)arg1)->embeddedFrameList();
  {
    vresult = taglib_id3v2_framelist_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_embedded_frame_list__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","embeddedFrameList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::FrameList *) &((TagLib::ID3v2::ChapterFrame const *)arg1)->embeddedFrameList((TagLib::ByteVector const &)*arg2);
  {
    vresult = taglib_id3v2_framelist_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ChapterFrame_embedded_frame_list(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ChapterFrame_embedded_frame_list__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ChapterFrame_embedded_frame_list__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ChapterFrame.embedded_frame_list", 
    "    TagLib::ID3v2::FrameList const ChapterFrame.embedded_frame_list()\n"
    "    TagLib::ID3v2::FrameList const & ChapterFrame.embedded_frame_list(TagLib::ByteVector const &frameID)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_add_embedded_frame(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","addEmbeddedFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","addEmbeddedFrame", 2, argv[0] ));
  }
  SWIG_RubyUnlinkObjects(arg2);
  SWIG_RubyRemoveTracking(arg2);
  (arg1)->addEmbeddedFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_remove_embedded_frame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","removeEmbeddedFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","removeEmbeddedFrame", 2, argv[0] ));
  }
  SWIG_RubyUnlinkObjects(arg2);
  SWIG_RubyRemoveTracking(arg2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","removeEmbeddedFrame", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->removeEmbeddedFrame(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_remove_embedded_frame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","removeEmbeddedFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","removeEmbeddedFrame", 2, argv[0] ));
  }
  SWIG_RubyUnlinkObjects(arg2);
  SWIG_RubyRemoveTracking(arg2);
  (arg1)->removeEmbeddedFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ChapterFrame_remove_embedded_frame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ChapterFrame_remove_embedded_frame__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ChapterFrame_remove_embedded_frame__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ChapterFrame.remove_embedded_frame", 
    "    void ChapterFrame.remove_embedded_frame(TagLib::ID3v2::Frame *frame, bool del)\n"
    "    void ChapterFrame.remove_embedded_frame(TagLib::ID3v2::Frame *frame)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_remove_embedded_frames(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame *","removeEmbeddedFrames", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->removeEmbeddedFrames((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::ChapterFrame *arg1 = (TagLib::ID3v2::ChapterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::ChapterFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::ChapterFrame * >(argp1);
  result = ((TagLib::ID3v2::ChapterFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ChapterFrame_find_by_element_id(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  TagLib::ID3v2::ChapterFrame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","TagLib::ID3v2::ChapterFrame::findByElementID", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::ChapterFrame *)TagLib::ID3v2::ChapterFrame::findByElementID((TagLib::ID3v2::Tag const *)arg1,(TagLib::ByteVector const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassCommentsFrame;

SWIGINTERN VALUE
_wrap_new_CommentsFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::String::Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TagLib::ID3v2::CommentsFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "TagLib::String::Type","CommentsFrame", 1, argv[0] ));
  } 
  arg1 = static_cast< TagLib::String::Type >(val1);
  result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame(arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CommentsFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_CommentsFrame_allocate(VALUE self)
#else
_wrap_CommentsFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_CommentsFrame__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::CommentsFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CommentsFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CommentsFrame__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CommentsFrame__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CommentsFrame__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CommentsFrame.new", 
    "    CommentsFrame.new(TagLib::String::Type encoding)\n"
    "    CommentsFrame.new()\n"
    "    CommentsFrame.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_CommentsFrame(void *self) {
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CommentsFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_language(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","language", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->language();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","description", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->description();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_text(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","text", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->text();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_languagee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame *","setLanguage", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setLanguage((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_descriptione___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame *","setDescription", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_texte___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setText((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_text_encoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","textEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::CommentsFrame const *)arg1)->textEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_text_encodinge___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame *","setTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CommentsFrame_find_by_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  TagLib::ID3v2::CommentsFrame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","TagLib::ID3v2::CommentsFrame::findByDescription", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::CommentsFrame *)TagLib::ID3v2::CommentsFrame::findByDescription((TagLib::ID3v2::Tag const *)arg1,(TagLib::String const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassGeneralEncapsulatedObjectFrame;

SWIGINTERN VALUE
_wrap_new_GeneralEncapsulatedObjectFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)new TagLib::ID3v2::GeneralEncapsulatedObjectFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_GeneralEncapsulatedObjectFrame_allocate(VALUE self)
#else
_wrap_GeneralEncapsulatedObjectFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_GeneralEncapsulatedObjectFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)new TagLib::ID3v2::GeneralEncapsulatedObjectFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_GeneralEncapsulatedObjectFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_GeneralEncapsulatedObjectFrame__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeneralEncapsulatedObjectFrame__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "GeneralEncapsulatedObjectFrame.new", 
    "    GeneralEncapsulatedObjectFrame.new()\n"
    "    GeneralEncapsulatedObjectFrame.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_GeneralEncapsulatedObjectFrame(void *self) {
    TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_to_string_list(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::StringList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *","toStringList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->toStringList();
  {
    vresult = taglib_string_list_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_text_encoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *","textEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->textEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_text_encodinge___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame *","setTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_mime_type(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *","mimeType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->mimeType();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_mime_typee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame *","setMimeType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setMimeType((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_file_name(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *","fileName", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->fileName();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_file_namee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame *","setFileName", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setFileName((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *","description", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->description();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_descriptione___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame *","setDescription", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_object(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *","object", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->object();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GeneralEncapsulatedObjectFrame_objecte___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame *","setObject", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::GeneralEncapsulatedObjectFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setObject((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassPopularimeterFrame;

SWIGINTERN VALUE
_wrap_new_PopularimeterFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::PopularimeterFrame *)new TagLib::ID3v2::PopularimeterFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PopularimeterFrame_allocate(VALUE self)
#else
_wrap_PopularimeterFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PopularimeterFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::PopularimeterFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::PopularimeterFrame *)new TagLib::ID3v2::PopularimeterFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PopularimeterFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_PopularimeterFrame__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PopularimeterFrame__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "PopularimeterFrame.new", 
    "    PopularimeterFrame.new()\n"
    "    PopularimeterFrame.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_PopularimeterFrame(void *self) {
    TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_PopularimeterFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PopularimeterFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PopularimeterFrame * >(argp1);
  result = ((TagLib::ID3v2::PopularimeterFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PopularimeterFrame_to_string_list(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::StringList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PopularimeterFrame const *","toStringList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PopularimeterFrame * >(argp1);
  result = ((TagLib::ID3v2::PopularimeterFrame const *)arg1)->toStringList();
  {
    vresult = taglib_string_list_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PopularimeterFrame_email(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PopularimeterFrame const *","email", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PopularimeterFrame * >(argp1);
  result = ((TagLib::ID3v2::PopularimeterFrame const *)arg1)->email();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PopularimeterFrame_emaile___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PopularimeterFrame *","setEmail", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PopularimeterFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setEmail((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PopularimeterFrame_rating(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PopularimeterFrame const *","rating", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PopularimeterFrame * >(argp1);
  result = (int)((TagLib::ID3v2::PopularimeterFrame const *)arg1)->rating();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PopularimeterFrame_ratinge___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PopularimeterFrame *","setRating", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PopularimeterFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","setRating", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setRating(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PopularimeterFrame_counter(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PopularimeterFrame const *","counter", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PopularimeterFrame * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::PopularimeterFrame const *)arg1)->counter();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PopularimeterFrame_countere___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PopularimeterFrame *","setCounter", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PopularimeterFrame * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","setCounter", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setCounter(arg2);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassPrivateFrame;

SWIGINTERN VALUE
_wrap_new_PrivateFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PrivateFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::PrivateFrame *)new TagLib::ID3v2::PrivateFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PrivateFrame_allocate(VALUE self)
#else
_wrap_PrivateFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__PrivateFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PrivateFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::PrivateFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::PrivateFrame *)new TagLib::ID3v2::PrivateFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PrivateFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_PrivateFrame__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PrivateFrame__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "PrivateFrame.new", 
    "    PrivateFrame.new()\n"
    "    PrivateFrame.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_PrivateFrame(void *self) {
    TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_PrivateFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PrivateFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PrivateFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PrivateFrame * >(argp1);
  result = ((TagLib::ID3v2::PrivateFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrivateFrame_owner(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PrivateFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PrivateFrame const *","owner", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PrivateFrame * >(argp1);
  result = ((TagLib::ID3v2::PrivateFrame const *)arg1)->owner();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrivateFrame_data(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PrivateFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PrivateFrame const *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PrivateFrame * >(argp1);
  result = ((TagLib::ID3v2::PrivateFrame const *)arg1)->data();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrivateFrame_ownere___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PrivateFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PrivateFrame *","setOwner", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PrivateFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setOwner((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrivateFrame_datae___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__PrivateFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::PrivateFrame *","setData", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::PrivateFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassTableOfContentsFrame;

SWIGINTERN VALUE
_wrap_new_TableOfContentsFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  TagLib::ID3v2::TableOfContentsFrame *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Header const *","TableOfContentsFrame", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Header * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::TableOfContentsFrame *)new TagLib::ID3v2::TableOfContentsFrame((TagLib::ID3v2::Header const *)arg1,(TagLib::ByteVector const &)*arg2);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_TableOfContentsFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVectorList *arg2 = 0 ;
  TagLib::ID3v2::FrameList *arg3 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ByteVectorList tmp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  TagLib::ID3v2::TableOfContentsFrame *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  {
    tmp2 = ruby_array_to_taglib_bytevectorlist(argv[1]);
    arg2 = &tmp2;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameList const &","TableOfContentsFrame", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::ID3v2::FrameList const &","TableOfContentsFrame", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< TagLib::ID3v2::FrameList * >(argp3);
  result = (TagLib::ID3v2::TableOfContentsFrame *)new TagLib::ID3v2::TableOfContentsFrame((TagLib::ByteVector const &)*arg1,(TagLib::ByteVectorList const &)*arg2,(TagLib::ID3v2::FrameList const &)*arg3);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_TableOfContentsFrame__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVectorList *arg2 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ByteVectorList tmp2 ;
  TagLib::ID3v2::TableOfContentsFrame *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  {
    tmp2 = ruby_array_to_taglib_bytevectorlist(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::TableOfContentsFrame *)new TagLib::ID3v2::TableOfContentsFrame((TagLib::ByteVector const &)*arg1,(TagLib::ByteVectorList const &)*arg2);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_TableOfContentsFrame_allocate(VALUE self)
#else
_wrap_TableOfContentsFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_TableOfContentsFrame__SWIG_3(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::TableOfContentsFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::TableOfContentsFrame *)new TagLib::ID3v2::TableOfContentsFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_TableOfContentsFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TableOfContentsFrame__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__Header, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TableOfContentsFrame__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ByteVectorList, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TableOfContentsFrame__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ByteVectorList, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_TableOfContentsFrame__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "TableOfContentsFrame.new", 
    "    TableOfContentsFrame.new(TagLib::ID3v2::Header const *tagHeader, TagLib::ByteVector const &data)\n"
    "    TableOfContentsFrame.new(TagLib::ByteVector const &elementID, TagLib::ByteVectorList const &children, TagLib::ID3v2::FrameList const &embeddedFrames)\n"
    "    TableOfContentsFrame.new(TagLib::ByteVector const &elementID, TagLib::ByteVectorList const &children)\n"
    "    TableOfContentsFrame.new(TagLib::ByteVector const &elementID)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_TableOfContentsFrame(void *self) {
    TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_TableOfContentsFrame_element_id(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","elementID", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  result = ((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->elementID();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_top_levelq___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","isTopLevel", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  result = (bool)((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->isTopLevel();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_orderedq___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","isOrdered", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  result = (bool)((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->isOrdered();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_entry_count(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","entryCount", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  result = (unsigned int)((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->entryCount();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_child_elements(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVectorList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","childElements", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  result = ((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->childElements();
  {
    vresult = taglib_bytevectorlist_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_element_ide___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","setElementID", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setElementID((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_is_top_levele___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","setIsTopLevel", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setIsTopLevel", 2, argv[0] ));
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->setIsTopLevel((bool const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_is_orderede___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","setIsOrdered", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setIsOrdered", 2, argv[0] ));
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  (arg1)->setIsOrdered((bool const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_child_elementse___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ByteVectorList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVectorList tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","setChildElements", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  {
    tmp2 = ruby_array_to_taglib_bytevectorlist(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setChildElements((TagLib::ByteVectorList const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_add_child_element(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","addChildElement", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->addChildElement((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_remove_child_element(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","removeChildElement", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->removeChildElement((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_embedded_frame_list_map(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::FrameListMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","embeddedFrameListMap", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  result = (TagLib::ID3v2::FrameListMap *) &((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->embeddedFrameListMap();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_embedded_frame_list__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","embeddedFrameList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  result = (TagLib::ID3v2::FrameList *) &((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->embeddedFrameList();
  {
    vresult = taglib_id3v2_framelist_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_embedded_frame_list__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","embeddedFrameList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::FrameList *) &((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->embeddedFrameList((TagLib::ByteVector const &)*arg2);
  {
    vresult = taglib_id3v2_framelist_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_TableOfContentsFrame_embedded_frame_list(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TableOfContentsFrame_embedded_frame_list__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TableOfContentsFrame_embedded_frame_list__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "TableOfContentsFrame.embedded_frame_list", 
    "    TagLib::ID3v2::FrameList const TableOfContentsFrame.embedded_frame_list()\n"
    "    TagLib::ID3v2::FrameList const & TableOfContentsFrame.embedded_frame_list(TagLib::ByteVector const &frameID)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_add_embedded_frame(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","addEmbeddedFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","addEmbeddedFrame", 2, argv[0] ));
  }
  SWIG_RubyUnlinkObjects(arg2);
  SWIG_RubyRemoveTracking(arg2);
  (arg1)->addEmbeddedFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_remove_embedded_frame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","removeEmbeddedFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","removeEmbeddedFrame", 2, argv[0] ));
  }
  SWIG_RubyUnlinkObjects(arg2);
  SWIG_RubyRemoveTracking(arg2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","removeEmbeddedFrame", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->removeEmbeddedFrame(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_remove_embedded_frame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","removeEmbeddedFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","removeEmbeddedFrame", 2, argv[0] ));
  }
  SWIG_RubyUnlinkObjects(arg2);
  SWIG_RubyRemoveTracking(arg2);
  (arg1)->removeEmbeddedFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_TableOfContentsFrame_remove_embedded_frame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TableOfContentsFrame_remove_embedded_frame__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TableOfContentsFrame_remove_embedded_frame__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "TableOfContentsFrame.remove_embedded_frame", 
    "    void TableOfContentsFrame.remove_embedded_frame(TagLib::ID3v2::Frame *frame, bool del)\n"
    "    void TableOfContentsFrame.remove_embedded_frame(TagLib::ID3v2::Frame *frame)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_remove_embedded_frames(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame *","removeEmbeddedFrames", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->removeEmbeddedFrames((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TableOfContentsFrame *arg1 = (TagLib::ID3v2::TableOfContentsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TableOfContentsFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TableOfContentsFrame * >(argp1);
  result = ((TagLib::ID3v2::TableOfContentsFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_find_by_element_id(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  TagLib::ID3v2::TableOfContentsFrame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","TagLib::ID3v2::TableOfContentsFrame::findByElementID", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::TableOfContentsFrame *)TagLib::ID3v2::TableOfContentsFrame::findByElementID((TagLib::ID3v2::Tag const *)arg1,(TagLib::ByteVector const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableOfContentsFrame_find_top_level(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ID3v2::TableOfContentsFrame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","TagLib::ID3v2::TableOfContentsFrame::findTopLevel", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (TagLib::ID3v2::TableOfContentsFrame *)TagLib::ID3v2::TableOfContentsFrame::findTopLevel((TagLib::ID3v2::Tag const *)arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassTextIdentificationFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_TextIdentificationFrame_allocate(VALUE self)
#else
_wrap_TextIdentificationFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_TextIdentificationFrame(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::String::Type arg2 ;
  TagLib::ByteVector tmp1 ;
  int val2 ;
  int ecode2 = 0 ;
  TagLib::ID3v2::TextIdentificationFrame *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","TextIdentificationFrame", 2, argv[1] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  result = (TagLib::ID3v2::TextIdentificationFrame *)new TagLib::ID3v2::TextIdentificationFrame((TagLib::ByteVector const &)*arg1,arg2);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_from_data_allocate(VALUE self)
#else
_wrap_from_data_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_from_data(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::TextIdentificationFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::TextIdentificationFrame *)new TagLib::ID3v2::TextIdentificationFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_TextIdentificationFrame(void *self) {
    TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_TextIdentificationFrame_field_liste___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::StringList tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TextIdentificationFrame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TextIdentificationFrame * >(argp1);
  {
    tmp2 = ruby_array_to_taglib_string_list(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setText((TagLib::StringList const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TextIdentificationFrame_texte___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TextIdentificationFrame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TextIdentificationFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setText((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TextIdentificationFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TextIdentificationFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TextIdentificationFrame * >(argp1);
  result = ((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TextIdentificationFrame_to_string_list(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::StringList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TextIdentificationFrame const *","toStringList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TextIdentificationFrame * >(argp1);
  result = ((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->toStringList();
  {
    vresult = taglib_string_list_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TextIdentificationFrame_text_encoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TextIdentificationFrame const *","textEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TextIdentificationFrame * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->textEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TextIdentificationFrame_text_encodinge___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TextIdentificationFrame *","setTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TextIdentificationFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TextIdentificationFrame_field_list(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::StringList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::TextIdentificationFrame const *","fieldList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::TextIdentificationFrame * >(argp1);
  result = ((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->fieldList();
  {
    vresult = taglib_string_list_to_ruby_array(result);
  }
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassUserTextIdentificationFrame;

SWIGINTERN VALUE
_wrap_new_UserTextIdentificationFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::String::Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TagLib::ID3v2::UserTextIdentificationFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "TagLib::String::Type","UserTextIdentificationFrame", 1, argv[0] ));
  } 
  arg1 = static_cast< TagLib::String::Type >(val1);
  result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame(arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_UserTextIdentificationFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserTextIdentificationFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_UserTextIdentificationFrame__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::UserTextIdentificationFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_UserTextIdentificationFrame__SWIG_3(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::StringList *arg2 = 0 ;
  TagLib::String::Type arg3 ;
  TagLib::String tmp1 ;
  TagLib::StringList tmp2 ;
  int val3 ;
  int ecode3 = 0 ;
  TagLib::ID3v2::UserTextIdentificationFrame *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_string(argv[0]);
    arg1 = &tmp1;
  }
  {
    tmp2 = ruby_array_to_taglib_string_list(argv[1]);
    arg2 = &tmp2;
  }
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::String::Type","UserTextIdentificationFrame", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::String::Type >(val3);
  result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame((TagLib::String const &)*arg1,(TagLib::StringList const &)*arg2,arg3);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_UserTextIdentificationFrame_allocate(VALUE self)
#else
_wrap_UserTextIdentificationFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_UserTextIdentificationFrame__SWIG_4(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::StringList *arg2 = 0 ;
  TagLib::String tmp1 ;
  TagLib::StringList tmp2 ;
  TagLib::ID3v2::UserTextIdentificationFrame *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_string(argv[0]);
    arg1 = &tmp1;
  }
  {
    tmp2 = ruby_array_to_taglib_string_list(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame((TagLib::String const &)*arg1,(TagLib::StringList const &)*arg2);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_UserTextIdentificationFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_UserTextIdentificationFrame__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UserTextIdentificationFrame__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UserTextIdentificationFrame__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = TYPE(argv[1]) == T_ARRAY ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_UserTextIdentificationFrame__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = TYPE(argv[1]) == T_ARRAY ? 1 : 0;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_UserTextIdentificationFrame__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "UserTextIdentificationFrame.new", 
    "    UserTextIdentificationFrame.new(TagLib::String::Type encoding)\n"
    "    UserTextIdentificationFrame.new()\n"
    "    UserTextIdentificationFrame.new(TagLib::ByteVector const &data)\n"
    "    UserTextIdentificationFrame.new(TagLib::String const &description, TagLib::StringList const &values, TagLib::String::Type encoding)\n"
    "    UserTextIdentificationFrame.new(TagLib::String const &description, TagLib::StringList const &values)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_UserTextIdentificationFrame(void *self) {
    TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_UserTextIdentificationFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserTextIdentificationFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserTextIdentificationFrame * >(argp1);
  result = ((TagLib::ID3v2::UserTextIdentificationFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserTextIdentificationFrame_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserTextIdentificationFrame const *","description", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserTextIdentificationFrame * >(argp1);
  result = ((TagLib::ID3v2::UserTextIdentificationFrame const *)arg1)->description();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserTextIdentificationFrame_descriptione___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserTextIdentificationFrame *","setDescription", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserTextIdentificationFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserTextIdentificationFrame_texte___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserTextIdentificationFrame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserTextIdentificationFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setText((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserTextIdentificationFrame_field_liste___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::StringList tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserTextIdentificationFrame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserTextIdentificationFrame * >(argp1);
  {
    tmp2 = ruby_array_to_taglib_string_list(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setText((TagLib::StringList const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: TagLib::ID3v2::UserTextIdentificationFrame.find

  call-seq:
    find(tag, description) -> UserTextIdentificationFrame

Find an element in the class.
*/
SWIGINTERN VALUE
_wrap_UserTextIdentificationFrame_find(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  TagLib::ID3v2::UserTextIdentificationFrame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","TagLib::ID3v2::UserTextIdentificationFrame::find", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::UserTextIdentificationFrame *)TagLib::ID3v2::UserTextIdentificationFrame::find((TagLib::ID3v2::Tag const *)arg1,(TagLib::String const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserTextIdentificationFrame_key_to_txxx(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::String tmp1 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_string(argv[0]);
    arg1 = &tmp1;
  }
  result = TagLib::ID3v2::UserTextIdentificationFrame::keyToTXXX((TagLib::String const &)*arg1);
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserTextIdentificationFrame_txxx_to_key(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::String tmp1 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_string(argv[0]);
    arg1 = &tmp1;
  }
  result = TagLib::ID3v2::UserTextIdentificationFrame::txxxToKey((TagLib::String const &)*arg1);
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassUniqueFileIdentifierFrame;

SWIGINTERN VALUE
_wrap_new_UniqueFileIdentifierFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::UniqueFileIdentifierFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::UniqueFileIdentifierFrame *)new TagLib::ID3v2::UniqueFileIdentifierFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_UniqueFileIdentifierFrame_allocate(VALUE self)
#else
_wrap_UniqueFileIdentifierFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_UniqueFileIdentifierFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::String tmp1 ;
  TagLib::ByteVector tmp2 ;
  TagLib::ID3v2::UniqueFileIdentifierFrame *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_string(argv[0]);
    arg1 = &tmp1;
  }
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[1]);
    arg2 = &tmp2;
  }
  result = (TagLib::ID3v2::UniqueFileIdentifierFrame *)new TagLib::ID3v2::UniqueFileIdentifierFrame((TagLib::String const &)*arg1,(TagLib::ByteVector const &)*arg2);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_UniqueFileIdentifierFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UniqueFileIdentifierFrame__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UniqueFileIdentifierFrame__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "UniqueFileIdentifierFrame.new", 
    "    UniqueFileIdentifierFrame.new(TagLib::ByteVector const &data)\n"
    "    UniqueFileIdentifierFrame.new(TagLib::String const &owner, TagLib::ByteVector const &id)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_UniqueFileIdentifierFrame(void *self) {
    TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_UniqueFileIdentifierFrame_owner(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UniqueFileIdentifierFrame const *","owner", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UniqueFileIdentifierFrame * >(argp1);
  result = ((TagLib::ID3v2::UniqueFileIdentifierFrame const *)arg1)->owner();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UniqueFileIdentifierFrame_identifier(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UniqueFileIdentifierFrame const *","identifier", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UniqueFileIdentifierFrame * >(argp1);
  result = ((TagLib::ID3v2::UniqueFileIdentifierFrame const *)arg1)->identifier();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UniqueFileIdentifierFrame_ownere___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UniqueFileIdentifierFrame *","setOwner", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UniqueFileIdentifierFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setOwner((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UniqueFileIdentifierFrame_identifiere___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UniqueFileIdentifierFrame *","setIdentifier", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UniqueFileIdentifierFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setIdentifier((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UniqueFileIdentifierFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UniqueFileIdentifierFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UniqueFileIdentifierFrame * >(argp1);
  result = ((TagLib::ID3v2::UniqueFileIdentifierFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassUnknownFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_UnknownFrame_allocate(VALUE self)
#else
_wrap_UnknownFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__UnknownFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_UnknownFrame(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::UnknownFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::UnknownFrame *)new TagLib::ID3v2::UnknownFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_UnknownFrame(void *self) {
    TagLib::ID3v2::UnknownFrame *arg1 = (TagLib::ID3v2::UnknownFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_UnknownFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnknownFrame *arg1 = (TagLib::ID3v2::UnknownFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnknownFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnknownFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnknownFrame * >(argp1);
  result = ((TagLib::ID3v2::UnknownFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnknownFrame_data(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnknownFrame *arg1 = (TagLib::ID3v2::UnknownFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnknownFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnknownFrame const *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnknownFrame * >(argp1);
  result = ((TagLib::ID3v2::UnknownFrame const *)arg1)->data();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassUnsynchronizedLyricsFrame;

SWIGINTERN VALUE
_wrap_new_UnsynchronizedLyricsFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::String::Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TagLib::ID3v2::UnsynchronizedLyricsFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "TagLib::String::Type","UnsynchronizedLyricsFrame", 1, argv[0] ));
  } 
  arg1 = static_cast< TagLib::String::Type >(val1);
  result = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)new TagLib::ID3v2::UnsynchronizedLyricsFrame(arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_UnsynchronizedLyricsFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)new TagLib::ID3v2::UnsynchronizedLyricsFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_UnsynchronizedLyricsFrame_allocate(VALUE self)
#else
_wrap_UnsynchronizedLyricsFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_UnsynchronizedLyricsFrame__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::UnsynchronizedLyricsFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)new TagLib::ID3v2::UnsynchronizedLyricsFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_UnsynchronizedLyricsFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_UnsynchronizedLyricsFrame__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UnsynchronizedLyricsFrame__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnsynchronizedLyricsFrame__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "UnsynchronizedLyricsFrame.new", 
    "    UnsynchronizedLyricsFrame.new(TagLib::String::Type encoding)\n"
    "    UnsynchronizedLyricsFrame.new()\n"
    "    UnsynchronizedLyricsFrame.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_UnsynchronizedLyricsFrame(void *self) {
    TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  result = ((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_language(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame const *","language", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  result = ((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->language();
  {
    vresult = taglib_bytevector_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame const *","description", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  result = ((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->description();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_text(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame const *","text", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  result = ((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->text();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_languagee___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::ByteVector tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame *","setLanguage", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_bytevector(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setLanguage((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_descriptione___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame *","setDescription", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_texte___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setText((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_text_encoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame const *","textEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->textEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UnsynchronizedLyricsFrame_text_encodinge___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UnsynchronizedLyricsFrame *","setTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UnsynchronizedLyricsFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassUrlLinkFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_UrlLinkFrame_allocate(VALUE self)
#else
_wrap_UrlLinkFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_UrlLinkFrame(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::UrlLinkFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::UrlLinkFrame *)new TagLib::ID3v2::UrlLinkFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_UrlLinkFrame(void *self) {
    TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_UrlLinkFrame_url(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UrlLinkFrame const *","url", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UrlLinkFrame * >(argp1);
  result = ((TagLib::ID3v2::UrlLinkFrame const *)arg1)->url();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UrlLinkFrame_urle___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UrlLinkFrame *","setUrl", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UrlLinkFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setUrl((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UrlLinkFrame_texte___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UrlLinkFrame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UrlLinkFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setText((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UrlLinkFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UrlLinkFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UrlLinkFrame * >(argp1);
  result = ((TagLib::ID3v2::UrlLinkFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassUserUrlLinkFrame;

SWIGINTERN VALUE
_wrap_new_UserUrlLinkFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::String::Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TagLib::ID3v2::UserUrlLinkFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "TagLib::String::Type","UserUrlLinkFrame", 1, argv[0] ));
  } 
  arg1 = static_cast< TagLib::String::Type >(val1);
  result = (TagLib::ID3v2::UserUrlLinkFrame *)new TagLib::ID3v2::UserUrlLinkFrame(arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_UserUrlLinkFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserUrlLinkFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::UserUrlLinkFrame *)new TagLib::ID3v2::UserUrlLinkFrame();
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_UserUrlLinkFrame_allocate(VALUE self)
#else
_wrap_UserUrlLinkFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_UserUrlLinkFrame__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector tmp1 ;
  TagLib::ID3v2::UserUrlLinkFrame *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    tmp1 = ruby_string_to_taglib_bytevector(argv[0]);
    arg1 = &tmp1;
  }
  result = (TagLib::ID3v2::UserUrlLinkFrame *)new TagLib::ID3v2::UserUrlLinkFrame((TagLib::ByteVector const &)*arg1);
  DATA_PTR(self) = result;
  SWIG_RubyAddTracking(result, self);
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_UserUrlLinkFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_UserUrlLinkFrame__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UserUrlLinkFrame__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UserUrlLinkFrame__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "UserUrlLinkFrame.new", 
    "    UserUrlLinkFrame.new(TagLib::String::Type encoding)\n"
    "    UserUrlLinkFrame.new()\n"
    "    UserUrlLinkFrame.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_UserUrlLinkFrame(void *self) {
    TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

SWIGINTERN VALUE
_wrap_UserUrlLinkFrame_to_string(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserUrlLinkFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserUrlLinkFrame * >(argp1);
  result = ((TagLib::ID3v2::UserUrlLinkFrame const *)arg1)->toString();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserUrlLinkFrame_text_encoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserUrlLinkFrame const *","textEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserUrlLinkFrame * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::UserUrlLinkFrame const *)arg1)->textEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserUrlLinkFrame_text_encodinge___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserUrlLinkFrame *","setTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserUrlLinkFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserUrlLinkFrame_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserUrlLinkFrame const *","description", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserUrlLinkFrame * >(argp1);
  result = ((TagLib::ID3v2::UserUrlLinkFrame const *)arg1)->description();
  {
    vresult = taglib_string_to_ruby_string(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_UserUrlLinkFrame_descriptione___(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TagLib::String tmp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::UserUrlLinkFrame *","setDescription", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::UserUrlLinkFrame * >(argp1);
  {
    tmp2 = ruby_string_to_taglib_string(argv[0]);
    arg2 = &tmp2;
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_TagLib__ID3v2__AttachedPictureFrameV22To_p_TagLib__ID3v2__AttachedPictureFrame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::AttachedPictureFrame *)  ((TagLib::ID3v2::AttachedPictureFrameV22 *) x));
}
static void *_p_TagLib__ID3v2__AttachedPictureFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::AttachedPictureFrame *) x));
}
static void *_p_TagLib__ID3v2__AttachedPictureFrameV22To_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *) (TagLib::ID3v2::AttachedPictureFrame *) ((TagLib::ID3v2::AttachedPictureFrameV22 *) x));
}
static void *_p_TagLib__ID3v2__ChapterFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::ChapterFrame *) x));
}
static void *_p_TagLib__ID3v2__CommentsFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::CommentsFrame *) x));
}
static void *_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) x));
}
static void *_p_TagLib__ID3v2__PopularimeterFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::PopularimeterFrame *) x));
}
static void *_p_TagLib__ID3v2__PrivateFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::PrivateFrame *) x));
}
static void *_p_TagLib__ID3v2__RelativeVolumeFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::RelativeVolumeFrame *) x));
}
static void *_p_TagLib__ID3v2__TableOfContentsFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::TableOfContentsFrame *) x));
}
static void *_p_TagLib__ID3v2__TextIdentificationFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::TextIdentificationFrame *) x));
}
static void *_p_TagLib__ID3v2__UniqueFileIdentifierFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::UniqueFileIdentifierFrame *) x));
}
static void *_p_TagLib__ID3v2__UnknownFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::UnknownFrame *) x));
}
static void *_p_TagLib__ID3v2__UnsynchronizedLyricsFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::UnsynchronizedLyricsFrame *) x));
}
static void *_p_TagLib__ID3v2__UrlLinkFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::UrlLinkFrame *) x));
}
static void *_p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *) (TagLib::ID3v2::TextIdentificationFrame *) ((TagLib::ID3v2::UserTextIdentificationFrame *) x));
}
static void *_p_TagLib__ID3v2__UserUrlLinkFrameTo_p_TagLib__ID3v2__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::Frame *) (TagLib::ID3v2::UrlLinkFrame *) ((TagLib::ID3v2::UserUrlLinkFrame *) x));
}
static void *_p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_TagLib__ID3v2__TextIdentificationFrame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::TextIdentificationFrame *)  ((TagLib::ID3v2::UserTextIdentificationFrame *) x));
}
static void *_p_TagLib__ID3v2__UserUrlLinkFrameTo_p_TagLib__ID3v2__UrlLinkFrame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::ID3v2::UrlLinkFrame *)  ((TagLib::ID3v2::UserUrlLinkFrame *) x));
}
static void *_p_TagLib__ID3v2__TagTo_p_TagLib__Tag(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TagLib::Tag *)  ((TagLib::ID3v2::Tag *) x));
}
static swig_type_info _swigt__p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t = {"_p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t", "TagLib::ID3v2::FrameListMap *|Map< TagLib::ByteVector,TagLib::List< TagLib::ID3v2::Frame * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ByteVector = {"_p_TagLib__ByteVector", "TagLib::ByteVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ByteVectorList = {"_p_TagLib__ByteVectorList", "TagLib::ByteVectorList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__File = {"_p_TagLib__File", "TagLib::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__AttachedPictureFrame = {"_p_TagLib__ID3v2__AttachedPictureFrame", "TagLib::ID3v2::AttachedPictureFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__AttachedPictureFrameV22 = {"_p_TagLib__ID3v2__AttachedPictureFrameV22", "TagLib::ID3v2::AttachedPictureFrameV22 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__ChapterFrame = {"_p_TagLib__ID3v2__ChapterFrame", "TagLib::ID3v2::ChapterFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__CommentsFrame = {"_p_TagLib__ID3v2__CommentsFrame", "TagLib::ID3v2::CommentsFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__ExtendedHeader = {"_p_TagLib__ID3v2__ExtendedHeader", "TagLib::ID3v2::ExtendedHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__Frame = {"_p_TagLib__ID3v2__Frame", "TagLib::ID3v2::Frame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__FrameFactory = {"_p_TagLib__ID3v2__FrameFactory", "TagLib::ID3v2::FrameFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__Frame__Header = {"_p_TagLib__ID3v2__Frame__Header", "TagLib::ID3v2::Frame::Header *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame = {"_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__Header = {"_p_TagLib__ID3v2__Header", "TagLib::ID3v2::Header *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__PopularimeterFrame = {"_p_TagLib__ID3v2__PopularimeterFrame", "TagLib::ID3v2::PopularimeterFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__PrivateFrame = {"_p_TagLib__ID3v2__PrivateFrame", "TagLib::ID3v2::PrivateFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__RelativeVolumeFrame = {"_p_TagLib__ID3v2__RelativeVolumeFrame", "TagLib::ID3v2::RelativeVolumeFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume = {"_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume", "TagLib::ID3v2::RelativeVolumeFrame::PeakVolume *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__TableOfContentsFrame = {"_p_TagLib__ID3v2__TableOfContentsFrame", "TagLib::ID3v2::TableOfContentsFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__Tag = {"_p_TagLib__ID3v2__Tag", "TagLib::ID3v2::Tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__TextIdentificationFrame = {"_p_TagLib__ID3v2__TextIdentificationFrame", "TagLib::ID3v2::TextIdentificationFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__UniqueFileIdentifierFrame = {"_p_TagLib__ID3v2__UniqueFileIdentifierFrame", "TagLib::ID3v2::UniqueFileIdentifierFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__UnknownFrame = {"_p_TagLib__ID3v2__UnknownFrame", "TagLib::ID3v2::UnknownFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__UnsynchronizedLyricsFrame = {"_p_TagLib__ID3v2__UnsynchronizedLyricsFrame", "TagLib::ID3v2::UnsynchronizedLyricsFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__UrlLinkFrame = {"_p_TagLib__ID3v2__UrlLinkFrame", "TagLib::ID3v2::UrlLinkFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__UserTextIdentificationFrame = {"_p_TagLib__ID3v2__UserTextIdentificationFrame", "TagLib::ID3v2::UserTextIdentificationFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__UserUrlLinkFrame = {"_p_TagLib__ID3v2__UserUrlLinkFrame", "TagLib::ID3v2::UserUrlLinkFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t = {"_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t", "TagLib::ID3v2::FrameList *|TagLib::List< TagLib::ID3v2::Frame * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__String = {"_p_TagLib__String", "TagLib::String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Tag = {"_p_TagLib__Tag", "TagLib::Tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_offset_t = {"_p_offset_t", "offset_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "TagLib::uchar *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "TagLib::uint *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "TagLib::ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "TagLib::wchar *|wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t,
  &_swigt__p_TagLib__ByteVector,
  &_swigt__p_TagLib__ByteVectorList,
  &_swigt__p_TagLib__File,
  &_swigt__p_TagLib__ID3v2__AttachedPictureFrame,
  &_swigt__p_TagLib__ID3v2__AttachedPictureFrameV22,
  &_swigt__p_TagLib__ID3v2__ChapterFrame,
  &_swigt__p_TagLib__ID3v2__CommentsFrame,
  &_swigt__p_TagLib__ID3v2__ExtendedHeader,
  &_swigt__p_TagLib__ID3v2__Frame,
  &_swigt__p_TagLib__ID3v2__FrameFactory,
  &_swigt__p_TagLib__ID3v2__Frame__Header,
  &_swigt__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame,
  &_swigt__p_TagLib__ID3v2__Header,
  &_swigt__p_TagLib__ID3v2__PopularimeterFrame,
  &_swigt__p_TagLib__ID3v2__PrivateFrame,
  &_swigt__p_TagLib__ID3v2__RelativeVolumeFrame,
  &_swigt__p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume,
  &_swigt__p_TagLib__ID3v2__TableOfContentsFrame,
  &_swigt__p_TagLib__ID3v2__Tag,
  &_swigt__p_TagLib__ID3v2__TextIdentificationFrame,
  &_swigt__p_TagLib__ID3v2__UniqueFileIdentifierFrame,
  &_swigt__p_TagLib__ID3v2__UnknownFrame,
  &_swigt__p_TagLib__ID3v2__UnsynchronizedLyricsFrame,
  &_swigt__p_TagLib__ID3v2__UrlLinkFrame,
  &_swigt__p_TagLib__ID3v2__UserTextIdentificationFrame,
  &_swigt__p_TagLib__ID3v2__UserUrlLinkFrame,
  &_swigt__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t,
  &_swigt__p_TagLib__String,
  &_swigt__p_TagLib__Tag,
  &_swigt__p_char,
  &_swigt__p_offset_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t[] = {  {&_swigt__p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ByteVector[] = {  {&_swigt__p_TagLib__ByteVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ByteVectorList[] = {  {&_swigt__p_TagLib__ByteVectorList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__File[] = {  {&_swigt__p_TagLib__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__AttachedPictureFrame[] = {  {&_swigt__p_TagLib__ID3v2__AttachedPictureFrame, 0, 0, 0},  {&_swigt__p_TagLib__ID3v2__AttachedPictureFrameV22, _p_TagLib__ID3v2__AttachedPictureFrameV22To_p_TagLib__ID3v2__AttachedPictureFrame, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__AttachedPictureFrameV22[] = {  {&_swigt__p_TagLib__ID3v2__AttachedPictureFrameV22, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__ChapterFrame[] = {  {&_swigt__p_TagLib__ID3v2__ChapterFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__CommentsFrame[] = {  {&_swigt__p_TagLib__ID3v2__CommentsFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__ExtendedHeader[] = {  {&_swigt__p_TagLib__ID3v2__ExtendedHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__Frame[] = {  {&_swigt__p_TagLib__ID3v2__Frame, 0, 0, 0},  {&_swigt__p_TagLib__ID3v2__AttachedPictureFrame, _p_TagLib__ID3v2__AttachedPictureFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__AttachedPictureFrameV22, _p_TagLib__ID3v2__AttachedPictureFrameV22To_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__ChapterFrame, _p_TagLib__ID3v2__ChapterFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__CommentsFrame, _p_TagLib__ID3v2__CommentsFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, _p_TagLib__ID3v2__GeneralEncapsulatedObjectFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__PopularimeterFrame, _p_TagLib__ID3v2__PopularimeterFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__PrivateFrame, _p_TagLib__ID3v2__PrivateFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__RelativeVolumeFrame, _p_TagLib__ID3v2__RelativeVolumeFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__TableOfContentsFrame, _p_TagLib__ID3v2__TableOfContentsFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__TextIdentificationFrame, _p_TagLib__ID3v2__TextIdentificationFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__UniqueFileIdentifierFrame, _p_TagLib__ID3v2__UniqueFileIdentifierFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__UnknownFrame, _p_TagLib__ID3v2__UnknownFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__UnsynchronizedLyricsFrame, _p_TagLib__ID3v2__UnsynchronizedLyricsFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__UrlLinkFrame, _p_TagLib__ID3v2__UrlLinkFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__UserTextIdentificationFrame, _p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__UserUrlLinkFrame, _p_TagLib__ID3v2__UserUrlLinkFrameTo_p_TagLib__ID3v2__Frame, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__FrameFactory[] = {  {&_swigt__p_TagLib__ID3v2__FrameFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__Frame__Header[] = {  {&_swigt__p_TagLib__ID3v2__Frame__Header, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame[] = {  {&_swigt__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__Header[] = {  {&_swigt__p_TagLib__ID3v2__Header, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__PopularimeterFrame[] = {  {&_swigt__p_TagLib__ID3v2__PopularimeterFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__PrivateFrame[] = {  {&_swigt__p_TagLib__ID3v2__PrivateFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__RelativeVolumeFrame[] = {  {&_swigt__p_TagLib__ID3v2__RelativeVolumeFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume[] = {  {&_swigt__p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__TableOfContentsFrame[] = {  {&_swigt__p_TagLib__ID3v2__TableOfContentsFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__Tag[] = {  {&_swigt__p_TagLib__ID3v2__Tag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__TextIdentificationFrame[] = {  {&_swigt__p_TagLib__ID3v2__TextIdentificationFrame, 0, 0, 0},  {&_swigt__p_TagLib__ID3v2__UserTextIdentificationFrame, _p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_TagLib__ID3v2__TextIdentificationFrame, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__UniqueFileIdentifierFrame[] = {  {&_swigt__p_TagLib__ID3v2__UniqueFileIdentifierFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__UnknownFrame[] = {  {&_swigt__p_TagLib__ID3v2__UnknownFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__UnsynchronizedLyricsFrame[] = {  {&_swigt__p_TagLib__ID3v2__UnsynchronizedLyricsFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__UrlLinkFrame[] = {  {&_swigt__p_TagLib__ID3v2__UrlLinkFrame, 0, 0, 0},  {&_swigt__p_TagLib__ID3v2__UserUrlLinkFrame, _p_TagLib__ID3v2__UserUrlLinkFrameTo_p_TagLib__ID3v2__UrlLinkFrame, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__UserTextIdentificationFrame[] = {  {&_swigt__p_TagLib__ID3v2__UserTextIdentificationFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__UserUrlLinkFrame[] = {  {&_swigt__p_TagLib__ID3v2__UserUrlLinkFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t[] = {  {&_swigt__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__String[] = {  {&_swigt__p_TagLib__String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Tag[] = {  {&_swigt__p_TagLib__Tag, 0, 0, 0},  {&_swigt__p_TagLib__ID3v2__Tag, _p_TagLib__ID3v2__TagTo_p_TagLib__Tag, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_offset_t[] = {  {&_swigt__p_offset_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_MapT_TagLib__ByteVector_TagLib__ListT_TagLib__ID3v2__Frame_p_t_t,
  _swigc__p_TagLib__ByteVector,
  _swigc__p_TagLib__ByteVectorList,
  _swigc__p_TagLib__File,
  _swigc__p_TagLib__ID3v2__AttachedPictureFrame,
  _swigc__p_TagLib__ID3v2__AttachedPictureFrameV22,
  _swigc__p_TagLib__ID3v2__ChapterFrame,
  _swigc__p_TagLib__ID3v2__CommentsFrame,
  _swigc__p_TagLib__ID3v2__ExtendedHeader,
  _swigc__p_TagLib__ID3v2__Frame,
  _swigc__p_TagLib__ID3v2__FrameFactory,
  _swigc__p_TagLib__ID3v2__Frame__Header,
  _swigc__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame,
  _swigc__p_TagLib__ID3v2__Header,
  _swigc__p_TagLib__ID3v2__PopularimeterFrame,
  _swigc__p_TagLib__ID3v2__PrivateFrame,
  _swigc__p_TagLib__ID3v2__RelativeVolumeFrame,
  _swigc__p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume,
  _swigc__p_TagLib__ID3v2__TableOfContentsFrame,
  _swigc__p_TagLib__ID3v2__Tag,
  _swigc__p_TagLib__ID3v2__TextIdentificationFrame,
  _swigc__p_TagLib__ID3v2__UniqueFileIdentifierFrame,
  _swigc__p_TagLib__ID3v2__UnknownFrame,
  _swigc__p_TagLib__ID3v2__UnsynchronizedLyricsFrame,
  _swigc__p_TagLib__ID3v2__UrlLinkFrame,
  _swigc__p_TagLib__ID3v2__UserTextIdentificationFrame,
  _swigc__p_TagLib__ID3v2__UserUrlLinkFrame,
  _swigc__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t,
  _swigc__p_TagLib__String,
  _swigc__p_TagLib__Tag,
  _swigc__p_char,
  _swigc__p_offset_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_taglib_id3v2(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mID3v2 = rb_define_module("TagLib");
  mID3v2 = rb_define_module_under(mID3v2, "ID3v2");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_module_function(mID3v2, "picture_type_to_string", VALUEFUNC(_wrap_picture_type_to_string), -1);
  rb_define_module_function(mID3v2, "picture_type_from_string", VALUEFUNC(_wrap_picture_type_from_string), -1);
  rb_require("taglib_base");
  rb_define_const(mID3v2, "V3", SWIG_From_int(static_cast< int >(TagLib::ID3v2::v3)));
  rb_define_const(mID3v2, "V4", SWIG_From_int(static_cast< int >(TagLib::ID3v2::v4)));
  
  SwigClassHeader.klass = rb_define_class_under(mID3v2, "Header", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__Header, (void *) &SwigClassHeader);
  rb_define_alloc_func(SwigClassHeader.klass, _wrap_Header_allocate);
  rb_define_method(SwigClassHeader.klass, "initialize", VALUEFUNC(_wrap_new_Header), -1);
  rb_define_method(SwigClassHeader.klass, "major_version", VALUEFUNC(_wrap_Header_major_version), -1);
  rb_define_method(SwigClassHeader.klass, "major_version=", VALUEFUNC(_wrap_Header_major_versione___), -1);
  rb_define_method(SwigClassHeader.klass, "revision_number", VALUEFUNC(_wrap_Header_revision_number), -1);
  rb_define_method(SwigClassHeader.klass, "unsynchronisation", VALUEFUNC(_wrap_Header_unsynchronisation), -1);
  rb_define_method(SwigClassHeader.klass, "extended_header", VALUEFUNC(_wrap_Header_extended_header), -1);
  rb_define_method(SwigClassHeader.klass, "experimental_indicator", VALUEFUNC(_wrap_Header_experimental_indicator), -1);
  rb_define_method(SwigClassHeader.klass, "footer_present", VALUEFUNC(_wrap_Header_footer_present), -1);
  rb_define_method(SwigClassHeader.klass, "tag_size", VALUEFUNC(_wrap_Header_tag_size), -1);
  rb_define_method(SwigClassHeader.klass, "complete_tag_size", VALUEFUNC(_wrap_Header_complete_tag_size), -1);
  rb_define_method(SwigClassHeader.klass, "tag_size=", VALUEFUNC(_wrap_Header_tag_sizee___), -1);
  rb_define_singleton_method(SwigClassHeader.klass, "size", VALUEFUNC(_wrap_Header_size), -1);
  rb_define_singleton_method(SwigClassHeader.klass, "file_identifier", VALUEFUNC(_wrap_Header_file_identifier), -1);
  rb_define_method(SwigClassHeader.klass, "data=", VALUEFUNC(_wrap_Header_datae___), -1);
  rb_define_method(SwigClassHeader.klass, "render", VALUEFUNC(_wrap_Header_render), -1);
  SwigClassHeader.mark = 0;
  SwigClassHeader.destroy = (void (*)(void *)) free_TagLib_ID3v2_Header;
  SwigClassHeader.trackObjects = 1;
  
  SwigClassFrame.klass = rb_define_class_under(mID3v2, "Frame", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__Frame, (void *) &SwigClassFrame);
  rb_undef_alloc_func(SwigClassFrame.klass);
  rb_define_method(SwigClassFrame.klass, "frame_id", VALUEFUNC(_wrap_Frame_frame_id), -1);
  rb_define_method(SwigClassFrame.klass, "size", VALUEFUNC(_wrap_Frame_size), -1);
  rb_define_method(SwigClassFrame.klass, "data=", VALUEFUNC(_wrap_Frame_datae___), -1);
  rb_define_method(SwigClassFrame.klass, "text=", VALUEFUNC(_wrap_Frame_texte___), -1);
  rb_define_method(SwigClassFrame.klass, "to_string", VALUEFUNC(_wrap_Frame_to_string), -1);
  rb_define_method(SwigClassFrame.klass, "to_string_list", VALUEFUNC(_wrap_Frame_to_string_list), -1);
  rb_define_method(SwigClassFrame.klass, "render", VALUEFUNC(_wrap_Frame_render), -1);
  rb_define_method(SwigClassFrame.klass, "header", VALUEFUNC(_wrap_Frame_header), -1);
  rb_define_singleton_method(SwigClassFrame.klass, "text_delimiter", VALUEFUNC(_wrap_Frame_text_delimiter), -1);
  rb_define_singleton_method(SwigClassFrame.klass, "key_to_frame_id", VALUEFUNC(_wrap_Frame_key_to_frame_id), -1);
  rb_define_singleton_method(SwigClassFrame.klass, "frame_idto_key", VALUEFUNC(_wrap_Frame_frame_idto_key), -1);
  SwigClassFrame.mark = 0;
  SwigClassFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_Frame;
  SwigClassFrame.trackObjects = 1;
  
  SwigClassTag.klass = rb_define_class_under(mID3v2, "Tag", ((swig_class *) SWIGTYPE_p_TagLib__Tag->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__Tag, (void *) &SwigClassTag);
  rb_define_alloc_func(SwigClassTag.klass, _wrap_Tag_allocate);
  rb_define_method(SwigClassTag.klass, "initialize", VALUEFUNC(_wrap_new_Tag), -1);
  rb_define_method(SwigClassTag.klass, "title", VALUEFUNC(_wrap_Tag_title), -1);
  rb_define_method(SwigClassTag.klass, "artist", VALUEFUNC(_wrap_Tag_artist), -1);
  rb_define_method(SwigClassTag.klass, "album", VALUEFUNC(_wrap_Tag_album), -1);
  rb_define_method(SwigClassTag.klass, "comment", VALUEFUNC(_wrap_Tag_comment), -1);
  rb_define_method(SwigClassTag.klass, "genre", VALUEFUNC(_wrap_Tag_genre), -1);
  rb_define_method(SwigClassTag.klass, "year", VALUEFUNC(_wrap_Tag_year), -1);
  rb_define_method(SwigClassTag.klass, "track", VALUEFUNC(_wrap_Tag_track), -1);
  rb_define_method(SwigClassTag.klass, "title=", VALUEFUNC(_wrap_Tag_titlee___), -1);
  rb_define_method(SwigClassTag.klass, "artist=", VALUEFUNC(_wrap_Tag_artiste___), -1);
  rb_define_method(SwigClassTag.klass, "album=", VALUEFUNC(_wrap_Tag_albume___), -1);
  rb_define_method(SwigClassTag.klass, "comment=", VALUEFUNC(_wrap_Tag_commente___), -1);
  rb_define_method(SwigClassTag.klass, "genre=", VALUEFUNC(_wrap_Tag_genree___), -1);
  rb_define_method(SwigClassTag.klass, "year=", VALUEFUNC(_wrap_Tag_yeare___), -1);
  rb_define_method(SwigClassTag.klass, "track=", VALUEFUNC(_wrap_Tag_tracke___), -1);
  rb_define_method(SwigClassTag.klass, "empty?", VALUEFUNC(_wrap_Tag_emptyq___), -1);
  rb_define_method(SwigClassTag.klass, "header", VALUEFUNC(_wrap_Tag_header), -1);
  rb_define_method(SwigClassTag.klass, "extended_header", VALUEFUNC(_wrap_Tag_extended_header), -1);
  rb_define_method(SwigClassTag.klass, "frame_list_map", VALUEFUNC(_wrap_Tag_frame_list_map), -1);
  rb_define_method(SwigClassTag.klass, "frame_list", VALUEFUNC(_wrap_Tag_frame_list), -1);
  rb_define_method(SwigClassTag.klass, "add_frame", VALUEFUNC(_wrap_Tag_add_frame), -1);
  rb_define_method(SwigClassTag.klass, "remove_frame", VALUEFUNC(_wrap_Tag_remove_frame), -1);
  rb_define_method(SwigClassTag.klass, "remove_frames", VALUEFUNC(_wrap_Tag_remove_frames), -1);
  SwigClassTag.mark = 0;
  SwigClassTag.destroy = (void (*)(void *)) free_TagLib_ID3v2_Tag;
  SwigClassTag.trackObjects = 1;
  
  SwigClassFrameFactory.klass = rb_define_class_under(mID3v2, "FrameFactory", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__FrameFactory, (void *) &SwigClassFrameFactory);
  rb_undef_alloc_func(SwigClassFrameFactory.klass);
  rb_define_singleton_method(SwigClassFrameFactory.klass, "instance", VALUEFUNC(_wrap_FrameFactory_instance), -1);
  rb_define_method(SwigClassFrameFactory.klass, "create_frame", VALUEFUNC(_wrap_FrameFactory_create_frame), -1);
  rb_define_method(SwigClassFrameFactory.klass, "create_frame_for_property", VALUEFUNC(_wrap_FrameFactory_create_frame_for_property), -1);
  rb_define_method(SwigClassFrameFactory.klass, "default_text_encoding", VALUEFUNC(_wrap_FrameFactory_default_text_encoding), -1);
  rb_define_method(SwigClassFrameFactory.klass, "default_text_encoding=", VALUEFUNC(_wrap_FrameFactory_default_text_encodinge___), -1);
  rb_define_method(SwigClassFrameFactory.klass, "is_using_default_text_encoding", VALUEFUNC(_wrap_FrameFactory_is_using_default_text_encoding), -1);
  SwigClassFrameFactory.mark = 0;
  SwigClassFrameFactory.trackObjects = 1;
  
  SwigClassRelativeVolumeFrame.klass = rb_define_class_under(mID3v2, "RelativeVolumeFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame, (void *) &SwigClassRelativeVolumeFrame);
  rb_define_alloc_func(SwigClassRelativeVolumeFrame.klass, _wrap_RelativeVolumeFrame_allocate);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "initialize", VALUEFUNC(_wrap_new_RelativeVolumeFrame), -1);
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "Other", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::Other)));
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "MasterVolume", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::MasterVolume)));
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "FrontRight", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::FrontRight)));
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "FrontLeft", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::FrontLeft)));
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "BackRight", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::BackRight)));
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "BackLeft", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::BackLeft)));
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "FrontCentre", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::FrontCentre)));
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "BackCentre", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::BackCentre)));
  rb_define_const(SwigClassRelativeVolumeFrame.klass, "Subwoofer", SWIG_From_int(static_cast< int >(TagLib::ID3v2::RelativeVolumeFrame::Subwoofer)));
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "to_string", VALUEFUNC(_wrap_RelativeVolumeFrame_to_string), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "channels", VALUEFUNC(_wrap_RelativeVolumeFrame_channels), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "volume_adjustment_index", VALUEFUNC(_wrap_RelativeVolumeFrame_volume_adjustment_index), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "set_volume_adjustment_index", VALUEFUNC(_wrap_RelativeVolumeFrame_set_volume_adjustment_index), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "volume_adjustment", VALUEFUNC(_wrap_RelativeVolumeFrame_volume_adjustment), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "set_volume_adjustment", VALUEFUNC(_wrap_RelativeVolumeFrame_set_volume_adjustment), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "peak_volume", VALUEFUNC(_wrap_RelativeVolumeFrame_peak_volume), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "set_peak_volume", VALUEFUNC(_wrap_RelativeVolumeFrame_set_peak_volume), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "identification", VALUEFUNC(_wrap_RelativeVolumeFrame_identification), -1);
  rb_define_method(SwigClassRelativeVolumeFrame.klass, "identification=", VALUEFUNC(_wrap_RelativeVolumeFrame_identificatione___), -1);
  SwigClassRelativeVolumeFrame.mark = 0;
  SwigClassRelativeVolumeFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_RelativeVolumeFrame;
  SwigClassRelativeVolumeFrame.trackObjects = 1;
  
  SwigClassPeakVolume.klass = rb_define_class_under(mID3v2, "PeakVolume", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__RelativeVolumeFrame__PeakVolume, (void *) &SwigClassPeakVolume);
  rb_define_alloc_func(SwigClassPeakVolume.klass, _wrap_PeakVolume_allocate);
  rb_define_method(SwigClassPeakVolume.klass, "initialize", VALUEFUNC(_wrap_new_PeakVolume), -1);
  rb_define_method(SwigClassPeakVolume.klass, "bits_representing_peak=", VALUEFUNC(_wrap_PeakVolume_bits_representing_peak_set), -1);
  rb_define_method(SwigClassPeakVolume.klass, "bits_representing_peak", VALUEFUNC(_wrap_PeakVolume_bits_representing_peak_get), -1);
  rb_define_method(SwigClassPeakVolume.klass, "peak_volume=", VALUEFUNC(_wrap_PeakVolume_peak_volume_set), -1);
  rb_define_method(SwigClassPeakVolume.klass, "peak_volume", VALUEFUNC(_wrap_PeakVolume_peak_volume_get), -1);
  SwigClassPeakVolume.mark = 0;
  SwigClassPeakVolume.destroy = (void (*)(void *)) free_TagLib_ID3v2_RelativeVolumeFrame_PeakVolume;
  SwigClassPeakVolume.trackObjects = 1;
  
  SwigClassAttachedPictureFrame.klass = rb_define_class_under(mID3v2, "AttachedPictureFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, (void *) &SwigClassAttachedPictureFrame);
  rb_define_alloc_func(SwigClassAttachedPictureFrame.klass, _wrap_AttachedPictureFrame_allocate);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "initialize", VALUEFUNC(_wrap_new_AttachedPictureFrame), -1);
  rb_define_const(SwigClassAttachedPictureFrame.klass, "Other", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Other)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "FileIcon", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::FileIcon)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "OtherFileIcon", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::OtherFileIcon)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "FrontCover", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::FrontCover)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "BackCover", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::BackCover)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "LeafletPage", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::LeafletPage)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "Media", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Media)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "LeadArtist", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::LeadArtist)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "Artist", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Artist)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "Conductor", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Conductor)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "Band", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Band)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "Composer", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Composer)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "Lyricist", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Lyricist)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "RecordingLocation", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::RecordingLocation)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "DuringRecording", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::DuringRecording)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "DuringPerformance", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::DuringPerformance)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "MovieScreenCapture", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::MovieScreenCapture)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "ColouredFish", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::ColouredFish)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "Illustration", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Illustration)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "BandLogo", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::BandLogo)));
  rb_define_const(SwigClassAttachedPictureFrame.klass, "PublisherLogo", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::PublisherLogo)));
  rb_define_singleton_method(SwigClassAttachedPictureFrame.klass, "type_to_string", VALUEFUNC(_wrap_AttachedPictureFrame_type_to_string), -1);
  rb_define_singleton_method(SwigClassAttachedPictureFrame.klass, "type_from_string", VALUEFUNC(_wrap_AttachedPictureFrame_type_from_string), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "to_string", VALUEFUNC(_wrap_AttachedPictureFrame_to_string), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "to_string_list", VALUEFUNC(_wrap_AttachedPictureFrame_to_string_list), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "text_encoding", VALUEFUNC(_wrap_AttachedPictureFrame_text_encoding), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "text_encoding=", VALUEFUNC(_wrap_AttachedPictureFrame_text_encodinge___), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "mime_type", VALUEFUNC(_wrap_AttachedPictureFrame_mime_type), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "mime_type=", VALUEFUNC(_wrap_AttachedPictureFrame_mime_typee___), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "type", VALUEFUNC(_wrap_AttachedPictureFrame_type), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "type=", VALUEFUNC(_wrap_AttachedPictureFrame_typee___), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "description", VALUEFUNC(_wrap_AttachedPictureFrame_description), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "description=", VALUEFUNC(_wrap_AttachedPictureFrame_descriptione___), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "picture", VALUEFUNC(_wrap_AttachedPictureFrame_picture), -1);
  rb_define_method(SwigClassAttachedPictureFrame.klass, "picture=", VALUEFUNC(_wrap_AttachedPictureFrame_picturee___), -1);
  SwigClassAttachedPictureFrame.mark = 0;
  SwigClassAttachedPictureFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_AttachedPictureFrame;
  SwigClassAttachedPictureFrame.trackObjects = 1;
  
  SwigClassAttachedPictureFrameV22.klass = rb_define_class_under(mID3v2, "AttachedPictureFrameV22", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrameV22, (void *) &SwigClassAttachedPictureFrameV22);
  rb_undef_alloc_func(SwigClassAttachedPictureFrameV22.klass);
  SwigClassAttachedPictureFrameV22.mark = 0;
  SwigClassAttachedPictureFrameV22.destroy = (void (*)(void *)) free_TagLib_ID3v2_AttachedPictureFrameV22;
  SwigClassAttachedPictureFrameV22.trackObjects = 1;
  
  SwigClassChapterFrame.klass = rb_define_class_under(mID3v2, "ChapterFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__ChapterFrame, (void *) &SwigClassChapterFrame);
  rb_define_alloc_func(SwigClassChapterFrame.klass, _wrap_ChapterFrame_allocate);
  rb_define_method(SwigClassChapterFrame.klass, "initialize", VALUEFUNC(_wrap_new_ChapterFrame), -1);
  rb_define_method(SwigClassChapterFrame.klass, "element_id", VALUEFUNC(_wrap_ChapterFrame_element_id), -1);
  rb_define_method(SwigClassChapterFrame.klass, "start_time", VALUEFUNC(_wrap_ChapterFrame_start_time), -1);
  rb_define_method(SwigClassChapterFrame.klass, "end_time", VALUEFUNC(_wrap_ChapterFrame_end_time), -1);
  rb_define_method(SwigClassChapterFrame.klass, "start_offset", VALUEFUNC(_wrap_ChapterFrame_start_offset), -1);
  rb_define_method(SwigClassChapterFrame.klass, "end_offset", VALUEFUNC(_wrap_ChapterFrame_end_offset), -1);
  rb_define_method(SwigClassChapterFrame.klass, "element_id=", VALUEFUNC(_wrap_ChapterFrame_element_ide___), -1);
  rb_define_method(SwigClassChapterFrame.klass, "start_time=", VALUEFUNC(_wrap_ChapterFrame_start_timee___), -1);
  rb_define_method(SwigClassChapterFrame.klass, "end_time=", VALUEFUNC(_wrap_ChapterFrame_end_timee___), -1);
  rb_define_method(SwigClassChapterFrame.klass, "start_offset=", VALUEFUNC(_wrap_ChapterFrame_start_offsete___), -1);
  rb_define_method(SwigClassChapterFrame.klass, "end_offset=", VALUEFUNC(_wrap_ChapterFrame_end_offsete___), -1);
  rb_define_method(SwigClassChapterFrame.klass, "embedded_frame_list_map", VALUEFUNC(_wrap_ChapterFrame_embedded_frame_list_map), -1);
  rb_define_method(SwigClassChapterFrame.klass, "embedded_frame_list", VALUEFUNC(_wrap_ChapterFrame_embedded_frame_list), -1);
  rb_define_method(SwigClassChapterFrame.klass, "add_embedded_frame", VALUEFUNC(_wrap_ChapterFrame_add_embedded_frame), -1);
  rb_define_method(SwigClassChapterFrame.klass, "remove_embedded_frame", VALUEFUNC(_wrap_ChapterFrame_remove_embedded_frame), -1);
  rb_define_method(SwigClassChapterFrame.klass, "remove_embedded_frames", VALUEFUNC(_wrap_ChapterFrame_remove_embedded_frames), -1);
  rb_define_method(SwigClassChapterFrame.klass, "to_string", VALUEFUNC(_wrap_ChapterFrame_to_string), -1);
  rb_define_singleton_method(SwigClassChapterFrame.klass, "find_by_element_id", VALUEFUNC(_wrap_ChapterFrame_find_by_element_id), -1);
  SwigClassChapterFrame.mark = 0;
  SwigClassChapterFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_ChapterFrame;
  SwigClassChapterFrame.trackObjects = 1;
  
  SwigClassCommentsFrame.klass = rb_define_class_under(mID3v2, "CommentsFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, (void *) &SwigClassCommentsFrame);
  rb_define_alloc_func(SwigClassCommentsFrame.klass, _wrap_CommentsFrame_allocate);
  rb_define_method(SwigClassCommentsFrame.klass, "initialize", VALUEFUNC(_wrap_new_CommentsFrame), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "to_string", VALUEFUNC(_wrap_CommentsFrame_to_string), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "language", VALUEFUNC(_wrap_CommentsFrame_language), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "description", VALUEFUNC(_wrap_CommentsFrame_description), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "text", VALUEFUNC(_wrap_CommentsFrame_text), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "language=", VALUEFUNC(_wrap_CommentsFrame_languagee___), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "description=", VALUEFUNC(_wrap_CommentsFrame_descriptione___), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "text=", VALUEFUNC(_wrap_CommentsFrame_texte___), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "text_encoding", VALUEFUNC(_wrap_CommentsFrame_text_encoding), -1);
  rb_define_method(SwigClassCommentsFrame.klass, "text_encoding=", VALUEFUNC(_wrap_CommentsFrame_text_encodinge___), -1);
  rb_define_singleton_method(SwigClassCommentsFrame.klass, "find_by_description", VALUEFUNC(_wrap_CommentsFrame_find_by_description), -1);
  SwigClassCommentsFrame.mark = 0;
  SwigClassCommentsFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_CommentsFrame;
  SwigClassCommentsFrame.trackObjects = 1;
  
  SwigClassGeneralEncapsulatedObjectFrame.klass = rb_define_class_under(mID3v2, "GeneralEncapsulatedObjectFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, (void *) &SwigClassGeneralEncapsulatedObjectFrame);
  rb_define_alloc_func(SwigClassGeneralEncapsulatedObjectFrame.klass, _wrap_GeneralEncapsulatedObjectFrame_allocate);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "initialize", VALUEFUNC(_wrap_new_GeneralEncapsulatedObjectFrame), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "to_string", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_to_string), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "to_string_list", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_to_string_list), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "text_encoding", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_text_encoding), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "text_encoding=", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_text_encodinge___), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "mime_type", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_mime_type), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "mime_type=", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_mime_typee___), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "file_name", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_file_name), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "file_name=", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_file_namee___), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "description", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_description), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "description=", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_descriptione___), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "object", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_object), -1);
  rb_define_method(SwigClassGeneralEncapsulatedObjectFrame.klass, "object=", VALUEFUNC(_wrap_GeneralEncapsulatedObjectFrame_objecte___), -1);
  SwigClassGeneralEncapsulatedObjectFrame.mark = 0;
  SwigClassGeneralEncapsulatedObjectFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_GeneralEncapsulatedObjectFrame;
  SwigClassGeneralEncapsulatedObjectFrame.trackObjects = 1;
  
  SwigClassPopularimeterFrame.klass = rb_define_class_under(mID3v2, "PopularimeterFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__PopularimeterFrame, (void *) &SwigClassPopularimeterFrame);
  rb_define_alloc_func(SwigClassPopularimeterFrame.klass, _wrap_PopularimeterFrame_allocate);
  rb_define_method(SwigClassPopularimeterFrame.klass, "initialize", VALUEFUNC(_wrap_new_PopularimeterFrame), -1);
  rb_define_method(SwigClassPopularimeterFrame.klass, "to_string", VALUEFUNC(_wrap_PopularimeterFrame_to_string), -1);
  rb_define_method(SwigClassPopularimeterFrame.klass, "to_string_list", VALUEFUNC(_wrap_PopularimeterFrame_to_string_list), -1);
  rb_define_method(SwigClassPopularimeterFrame.klass, "email", VALUEFUNC(_wrap_PopularimeterFrame_email), -1);
  rb_define_method(SwigClassPopularimeterFrame.klass, "email=", VALUEFUNC(_wrap_PopularimeterFrame_emaile___), -1);
  rb_define_method(SwigClassPopularimeterFrame.klass, "rating", VALUEFUNC(_wrap_PopularimeterFrame_rating), -1);
  rb_define_method(SwigClassPopularimeterFrame.klass, "rating=", VALUEFUNC(_wrap_PopularimeterFrame_ratinge___), -1);
  rb_define_method(SwigClassPopularimeterFrame.klass, "counter", VALUEFUNC(_wrap_PopularimeterFrame_counter), -1);
  rb_define_method(SwigClassPopularimeterFrame.klass, "counter=", VALUEFUNC(_wrap_PopularimeterFrame_countere___), -1);
  SwigClassPopularimeterFrame.mark = 0;
  SwigClassPopularimeterFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_PopularimeterFrame;
  SwigClassPopularimeterFrame.trackObjects = 1;
  
  SwigClassPrivateFrame.klass = rb_define_class_under(mID3v2, "PrivateFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__PrivateFrame, (void *) &SwigClassPrivateFrame);
  rb_define_alloc_func(SwigClassPrivateFrame.klass, _wrap_PrivateFrame_allocate);
  rb_define_method(SwigClassPrivateFrame.klass, "initialize", VALUEFUNC(_wrap_new_PrivateFrame), -1);
  rb_define_method(SwigClassPrivateFrame.klass, "to_string", VALUEFUNC(_wrap_PrivateFrame_to_string), -1);
  rb_define_method(SwigClassPrivateFrame.klass, "owner", VALUEFUNC(_wrap_PrivateFrame_owner), -1);
  rb_define_method(SwigClassPrivateFrame.klass, "data", VALUEFUNC(_wrap_PrivateFrame_data), -1);
  rb_define_method(SwigClassPrivateFrame.klass, "owner=", VALUEFUNC(_wrap_PrivateFrame_ownere___), -1);
  rb_define_method(SwigClassPrivateFrame.klass, "data=", VALUEFUNC(_wrap_PrivateFrame_datae___), -1);
  SwigClassPrivateFrame.mark = 0;
  SwigClassPrivateFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_PrivateFrame;
  SwigClassPrivateFrame.trackObjects = 1;
  
  SwigClassTableOfContentsFrame.klass = rb_define_class_under(mID3v2, "TableOfContentsFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__TableOfContentsFrame, (void *) &SwigClassTableOfContentsFrame);
  rb_define_alloc_func(SwigClassTableOfContentsFrame.klass, _wrap_TableOfContentsFrame_allocate);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "initialize", VALUEFUNC(_wrap_new_TableOfContentsFrame), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "element_id", VALUEFUNC(_wrap_TableOfContentsFrame_element_id), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "top_level?", VALUEFUNC(_wrap_TableOfContentsFrame_top_levelq___), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "ordered?", VALUEFUNC(_wrap_TableOfContentsFrame_orderedq___), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "entry_count", VALUEFUNC(_wrap_TableOfContentsFrame_entry_count), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "child_elements", VALUEFUNC(_wrap_TableOfContentsFrame_child_elements), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "element_id=", VALUEFUNC(_wrap_TableOfContentsFrame_element_ide___), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "is_top_level=", VALUEFUNC(_wrap_TableOfContentsFrame_is_top_levele___), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "is_ordered=", VALUEFUNC(_wrap_TableOfContentsFrame_is_orderede___), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "child_elements=", VALUEFUNC(_wrap_TableOfContentsFrame_child_elementse___), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "add_child_element", VALUEFUNC(_wrap_TableOfContentsFrame_add_child_element), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "remove_child_element", VALUEFUNC(_wrap_TableOfContentsFrame_remove_child_element), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "embedded_frame_list_map", VALUEFUNC(_wrap_TableOfContentsFrame_embedded_frame_list_map), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "embedded_frame_list", VALUEFUNC(_wrap_TableOfContentsFrame_embedded_frame_list), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "add_embedded_frame", VALUEFUNC(_wrap_TableOfContentsFrame_add_embedded_frame), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "remove_embedded_frame", VALUEFUNC(_wrap_TableOfContentsFrame_remove_embedded_frame), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "remove_embedded_frames", VALUEFUNC(_wrap_TableOfContentsFrame_remove_embedded_frames), -1);
  rb_define_method(SwigClassTableOfContentsFrame.klass, "to_string", VALUEFUNC(_wrap_TableOfContentsFrame_to_string), -1);
  rb_define_singleton_method(SwigClassTableOfContentsFrame.klass, "find_by_element_id", VALUEFUNC(_wrap_TableOfContentsFrame_find_by_element_id), -1);
  rb_define_singleton_method(SwigClassTableOfContentsFrame.klass, "find_top_level", VALUEFUNC(_wrap_TableOfContentsFrame_find_top_level), -1);
  SwigClassTableOfContentsFrame.mark = 0;
  SwigClassTableOfContentsFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_TableOfContentsFrame;
  SwigClassTableOfContentsFrame.trackObjects = 1;
  
  SwigClassTextIdentificationFrame.klass = rb_define_class_under(mID3v2, "TextIdentificationFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, (void *) &SwigClassTextIdentificationFrame);
  rb_define_alloc_func(SwigClassTextIdentificationFrame.klass, _wrap_TextIdentificationFrame_allocate);
  rb_define_method(SwigClassTextIdentificationFrame.klass, "initialize", VALUEFUNC(_wrap_new_TextIdentificationFrame), -1);
  rb_define_method(SwigClassTextIdentificationFrame.klass, "field_list=", VALUEFUNC(_wrap_TextIdentificationFrame_field_liste___), -1);
  rb_define_method(SwigClassTextIdentificationFrame.klass, "text=", VALUEFUNC(_wrap_TextIdentificationFrame_texte___), -1);
  rb_define_method(SwigClassTextIdentificationFrame.klass, "to_string", VALUEFUNC(_wrap_TextIdentificationFrame_to_string), -1);
  rb_define_method(SwigClassTextIdentificationFrame.klass, "to_string_list", VALUEFUNC(_wrap_TextIdentificationFrame_to_string_list), -1);
  rb_define_method(SwigClassTextIdentificationFrame.klass, "text_encoding", VALUEFUNC(_wrap_TextIdentificationFrame_text_encoding), -1);
  rb_define_method(SwigClassTextIdentificationFrame.klass, "text_encoding=", VALUEFUNC(_wrap_TextIdentificationFrame_text_encodinge___), -1);
  rb_define_method(SwigClassTextIdentificationFrame.klass, "field_list", VALUEFUNC(_wrap_TextIdentificationFrame_field_list), -1);
  SwigClassTextIdentificationFrame.mark = 0;
  SwigClassTextIdentificationFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_TextIdentificationFrame;
  SwigClassTextIdentificationFrame.trackObjects = 1;
  
  SwigClassUserTextIdentificationFrame.klass = rb_define_class_under(mID3v2, "UserTextIdentificationFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, (void *) &SwigClassUserTextIdentificationFrame);
  rb_define_alloc_func(SwigClassUserTextIdentificationFrame.klass, _wrap_UserTextIdentificationFrame_allocate);
  rb_define_method(SwigClassUserTextIdentificationFrame.klass, "initialize", VALUEFUNC(_wrap_new_UserTextIdentificationFrame), -1);
  rb_define_method(SwigClassUserTextIdentificationFrame.klass, "to_string", VALUEFUNC(_wrap_UserTextIdentificationFrame_to_string), -1);
  rb_define_method(SwigClassUserTextIdentificationFrame.klass, "description", VALUEFUNC(_wrap_UserTextIdentificationFrame_description), -1);
  rb_define_method(SwigClassUserTextIdentificationFrame.klass, "description=", VALUEFUNC(_wrap_UserTextIdentificationFrame_descriptione___), -1);
  rb_define_method(SwigClassUserTextIdentificationFrame.klass, "text=", VALUEFUNC(_wrap_UserTextIdentificationFrame_texte___), -1);
  rb_define_method(SwigClassUserTextIdentificationFrame.klass, "field_list=", VALUEFUNC(_wrap_UserTextIdentificationFrame_field_liste___), -1);
  rb_define_singleton_method(SwigClassUserTextIdentificationFrame.klass, "find", VALUEFUNC(_wrap_UserTextIdentificationFrame_find), -1);
  rb_define_singleton_method(SwigClassUserTextIdentificationFrame.klass, "key_to_txxx", VALUEFUNC(_wrap_UserTextIdentificationFrame_key_to_txxx), -1);
  rb_define_singleton_method(SwigClassUserTextIdentificationFrame.klass, "txxx_to_key", VALUEFUNC(_wrap_UserTextIdentificationFrame_txxx_to_key), -1);
  SwigClassUserTextIdentificationFrame.mark = 0;
  SwigClassUserTextIdentificationFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_UserTextIdentificationFrame;
  SwigClassUserTextIdentificationFrame.trackObjects = 1;
  
  SwigClassUniqueFileIdentifierFrame.klass = rb_define_class_under(mID3v2, "UniqueFileIdentifierFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__UniqueFileIdentifierFrame, (void *) &SwigClassUniqueFileIdentifierFrame);
  rb_define_alloc_func(SwigClassUniqueFileIdentifierFrame.klass, _wrap_UniqueFileIdentifierFrame_allocate);
  rb_define_method(SwigClassUniqueFileIdentifierFrame.klass, "initialize", VALUEFUNC(_wrap_new_UniqueFileIdentifierFrame), -1);
  rb_define_method(SwigClassUniqueFileIdentifierFrame.klass, "owner", VALUEFUNC(_wrap_UniqueFileIdentifierFrame_owner), -1);
  rb_define_method(SwigClassUniqueFileIdentifierFrame.klass, "identifier", VALUEFUNC(_wrap_UniqueFileIdentifierFrame_identifier), -1);
  rb_define_method(SwigClassUniqueFileIdentifierFrame.klass, "owner=", VALUEFUNC(_wrap_UniqueFileIdentifierFrame_ownere___), -1);
  rb_define_method(SwigClassUniqueFileIdentifierFrame.klass, "identifier=", VALUEFUNC(_wrap_UniqueFileIdentifierFrame_identifiere___), -1);
  rb_define_method(SwigClassUniqueFileIdentifierFrame.klass, "to_string", VALUEFUNC(_wrap_UniqueFileIdentifierFrame_to_string), -1);
  SwigClassUniqueFileIdentifierFrame.mark = 0;
  SwigClassUniqueFileIdentifierFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_UniqueFileIdentifierFrame;
  SwigClassUniqueFileIdentifierFrame.trackObjects = 1;
  
  SwigClassUnknownFrame.klass = rb_define_class_under(mID3v2, "UnknownFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__UnknownFrame, (void *) &SwigClassUnknownFrame);
  rb_define_alloc_func(SwigClassUnknownFrame.klass, _wrap_UnknownFrame_allocate);
  rb_define_method(SwigClassUnknownFrame.klass, "initialize", VALUEFUNC(_wrap_new_UnknownFrame), -1);
  rb_define_method(SwigClassUnknownFrame.klass, "to_string", VALUEFUNC(_wrap_UnknownFrame_to_string), -1);
  rb_define_method(SwigClassUnknownFrame.klass, "data", VALUEFUNC(_wrap_UnknownFrame_data), -1);
  SwigClassUnknownFrame.mark = 0;
  SwigClassUnknownFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_UnknownFrame;
  SwigClassUnknownFrame.trackObjects = 1;
  
  SwigClassUnsynchronizedLyricsFrame.klass = rb_define_class_under(mID3v2, "UnsynchronizedLyricsFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__UnsynchronizedLyricsFrame, (void *) &SwigClassUnsynchronizedLyricsFrame);
  rb_define_alloc_func(SwigClassUnsynchronizedLyricsFrame.klass, _wrap_UnsynchronizedLyricsFrame_allocate);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "initialize", VALUEFUNC(_wrap_new_UnsynchronizedLyricsFrame), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "to_string", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_to_string), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "language", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_language), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "description", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_description), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "text", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_text), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "language=", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_languagee___), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "description=", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_descriptione___), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "text=", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_texte___), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "text_encoding", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_text_encoding), -1);
  rb_define_method(SwigClassUnsynchronizedLyricsFrame.klass, "text_encoding=", VALUEFUNC(_wrap_UnsynchronizedLyricsFrame_text_encodinge___), -1);
  SwigClassUnsynchronizedLyricsFrame.mark = 0;
  SwigClassUnsynchronizedLyricsFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_UnsynchronizedLyricsFrame;
  SwigClassUnsynchronizedLyricsFrame.trackObjects = 1;
  
  SwigClassUrlLinkFrame.klass = rb_define_class_under(mID3v2, "UrlLinkFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame, (void *) &SwigClassUrlLinkFrame);
  rb_define_alloc_func(SwigClassUrlLinkFrame.klass, _wrap_UrlLinkFrame_allocate);
  rb_define_method(SwigClassUrlLinkFrame.klass, "initialize", VALUEFUNC(_wrap_new_UrlLinkFrame), -1);
  rb_define_method(SwigClassUrlLinkFrame.klass, "url", VALUEFUNC(_wrap_UrlLinkFrame_url), -1);
  rb_define_method(SwigClassUrlLinkFrame.klass, "url=", VALUEFUNC(_wrap_UrlLinkFrame_urle___), -1);
  rb_define_method(SwigClassUrlLinkFrame.klass, "text=", VALUEFUNC(_wrap_UrlLinkFrame_texte___), -1);
  rb_define_method(SwigClassUrlLinkFrame.klass, "to_string", VALUEFUNC(_wrap_UrlLinkFrame_to_string), -1);
  SwigClassUrlLinkFrame.mark = 0;
  SwigClassUrlLinkFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_UrlLinkFrame;
  SwigClassUrlLinkFrame.trackObjects = 1;
  
  SwigClassUserUrlLinkFrame.klass = rb_define_class_under(mID3v2, "UserUrlLinkFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__UrlLinkFrame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__UserUrlLinkFrame, (void *) &SwigClassUserUrlLinkFrame);
  rb_define_alloc_func(SwigClassUserUrlLinkFrame.klass, _wrap_UserUrlLinkFrame_allocate);
  rb_define_method(SwigClassUserUrlLinkFrame.klass, "initialize", VALUEFUNC(_wrap_new_UserUrlLinkFrame), -1);
  rb_define_method(SwigClassUserUrlLinkFrame.klass, "to_string", VALUEFUNC(_wrap_UserUrlLinkFrame_to_string), -1);
  rb_define_method(SwigClassUserUrlLinkFrame.klass, "text_encoding", VALUEFUNC(_wrap_UserUrlLinkFrame_text_encoding), -1);
  rb_define_method(SwigClassUserUrlLinkFrame.klass, "text_encoding=", VALUEFUNC(_wrap_UserUrlLinkFrame_text_encodinge___), -1);
  rb_define_method(SwigClassUserUrlLinkFrame.klass, "description", VALUEFUNC(_wrap_UserUrlLinkFrame_description), -1);
  rb_define_method(SwigClassUserUrlLinkFrame.klass, "description=", VALUEFUNC(_wrap_UserUrlLinkFrame_descriptione___), -1);
  SwigClassUserUrlLinkFrame.mark = 0;
  SwigClassUserUrlLinkFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_UserUrlLinkFrame;
  SwigClassUserUrlLinkFrame.trackObjects = 1;
}

